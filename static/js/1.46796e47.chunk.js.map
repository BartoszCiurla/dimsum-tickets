{"version":3,"sources":["../../../../src/FocusGroup/FocusGrid.js","../../../src/utils.js","../../../../src/FocusGroup/focusGroupManagerHoc.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/SearchBox/SearchBoxToggle.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../src/Search.js","../../../../../src/form/ExpandableInput/ExpandableInputImpl.js","../../../../../src/form/ExpandableInput/DSExpandableInput.js","../../../../../src/FocusGroup/utils/getNextCellPosition.js","../node_modules/@elliemae/ds-utilities/cjs/hooks/useHotkeys.js"],"names":["FocusGridContext","createContext","Provider","preventDefault","e","shouldWrapRows","shouldWrapCells","shouldRefocus","children","keyBindings","hotKeys","focusedRow","useRef","focusedCell","grid","containerRef","child","React","decoratedChild","innerRef","mergeRefs","getNode","rowIndex","cellIndex","get","register","node","columnIndex","Array","prevNode","current","useEffect","focusNextCell","directionY","directionX","position","getNextCellPosition","currentCell","currentRow","Object","handler","options","useHotkeys","keys","registerHotKeysHooks","defaultKeyBindings","ArrowUp","runAll","ArrowRight","ArrowDown","ArrowLeft","Home","End","nextKeyBindings","defaultBindings","onKeyDown","action","isFunction","activate","container","deactivate","valueProvider","useMemo","value","param","WrappedComponent","onExitFocusGroup","onFocusPrevGroup","focusKeyBindings","props","withSearchable","debounce","prevPropValue","this","onKeyUp","searchOnEnter","key","onSearch","property","clearOnSearch","setState","query","target","containerProps","rest","buttonRef","onChange","nextProps","SearchBoxContainer","aggregatedClasses","SearchBoxToggle","isOpen","prevProps","prevValue","executeIfValue","handleSearch","expandableEl","contains","placeholder","clearable","className","width","onBlur","onClose","onOpen","triggerComponent","buttonType","icon","showIcon","Component","disabled","style","readOnly","rightComponent","iconSize","onClick","DSSearchBox","undefined","searchIcon","toggleSearchInput","PropTypes","bool","createIcon","paths","height","ExpandableInput","opened","InputWrapper","ExpandableInputImpl","input","focus","InputComponent","classProps","rightComponents","cloneElement","nextRow","nextCell","rowCount","isLeftRight","cellsLength","_interopDefault","ex","require","hotkeys","module","exports","_ref","_ref$options","deps","arguments","length","memoizedCallback","useCallback","unbind"],"mappings":"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","file":"static/js/1.46796e47.chunk.js","sourcesContent":["import React, {\n  createContext, useEffect, useMemo, useRef,\n} from 'react'\nimport { isFunction, runAll, get } from '@elliemae/ds-utilities/utils'\nimport useHotkeys from '@elliemae/ds-utilities/hooks/useHotkeys'\nimport { mergeRefs } from '@elliemae/ds-utilities/system'\nimport getNextCellPosition from './utils/getNextCellPosition'\n\nexport const FocusGridContext = createContext()\nconst { Provider } = FocusGridContext\n\nconst preventDefault = e => e.preventDefault()\n\nfunction registerHotKeysHooks(hotKeys, { focusedRow, focusedCell }) {\n  Object.keys(hotKeys).forEach((key) => {\n    const { handler, options } = hotKeys[key]\n    useHotkeys({\n      keys: key,\n      handler: (e) => {\n        e.preventDefault()\n        handler({\n          rowIndex: focusedRow.current,\n          cellIndex: focusedCell.current,\n        })\n      },\n      options,\n    })\n  })\n}\n\n// eslint-disable-next-line max-statements\nexport default function FocusGridProvider({\n  shouldWrapRows = false,\n  shouldWrapCells = false,\n  shouldRefocus = true,\n  children,\n  keyBindings,\n  hotKeys,\n}) {\n  const focusedRow = useRef()\n  const focusedCell = useRef()\n  const grid = useRef([])\n  const containerRef = useRef(document)\n  const child = React.Children.only(children)\n  const decoratedChild = React.cloneElement(child, { innerRef: mergeRefs(child.props.innerRef, containerRef) })\n\n  const getNode = ({ rowIndex, cellIndex }) => get(grid.current, [rowIndex, cellIndex])\n\n  const register = (node, rowIndex, columnIndex) => {\n    if (!node) return\n    if (!Array.isArray(grid.current[rowIndex])) {\n      grid.current[rowIndex] = []\n    }\n\n    if (rowIndex === 0 && columnIndex === 0) {\n      node.setAttribute('tabindex', 0)\n    } else {\n      node.setAttribute('tabindex', -1)\n    }\n\n    node.onfocus = () => {\n      const prevNode = getNode({\n        rowIndex: focusedRow.current,\n        cellIndex: focusedCell.current,\n      })\n\n      if (prevNode) prevNode.setAttribute('tabindex', -1)\n\n      node.setAttribute('tabindex', 0)\n      focusedRow.current = rowIndex\n      focusedCell.current = columnIndex\n    }\n    grid.current[rowIndex][columnIndex] = node\n  }\n\n  useEffect(() => {\n    if (shouldRefocus) {\n      const rowIndex = focusedRow.current\n      const cellIndex = focusedCell.current\n\n      const node = get(grid.current, [rowIndex, cellIndex])\n      if (node) node.focus()\n    }\n  })\n\n\n  const focusNextCell = (directionY, directionX, position) => {\n    const { rowIndex, cellIndex } = position || getNextCellPosition({\n      grid: grid.current,\n      currentCell: focusedCell.current,\n      currentRow: focusedRow.current,\n      directionX,\n      directionY,\n      shouldWrapCells,\n      shouldWrapRows,\n    })\n\n    const node = getNode({ rowIndex, cellIndex })\n\n    // can focus\n    if (node) {\n      node.focus()\n      focusedRow.current = rowIndex\n      focusedCell.current = cellIndex\n    }\n  }\n\n  registerHotKeysHooks(hotKeys, { focusedCell, focusedRow })\n\n  const defaultKeyBindings = {\n    ArrowUp: runAll(preventDefault, () => focusNextCell(-1, 0)),\n    ArrowRight: runAll(preventDefault, () => focusNextCell(0, 1)),\n    ArrowDown: runAll(preventDefault, () => focusNextCell(1, 0)),\n    ArrowLeft: runAll(preventDefault, () => focusNextCell(0, -1)),\n    Home: runAll(preventDefault,\n      (e) => {\n        let rowIndex = focusedRow.current\n        if (e.ctrlKey) {\n          rowIndex = 0\n        }\n        focusNextCell(\n          0,\n          0,\n          { rowIndex, cellIndex: 0 })\n      },\n    ),\n    End: runAll(preventDefault,\n      (e) => {\n        let rowIndex = focusedRow.current\n        if (e.ctrlKey) {\n          rowIndex = grid.current.length - 1\n        }\n        focusNextCell(\n          0,\n          0,\n          { rowIndex, cellIndex: grid.current[0].length - 1 })\n      },\n    ),\n    ...keyBindings,\n  }\n  const nextKeyBindings = isFunction(keyBindings)\n    ? keyBindings({\n      defaultBindings: defaultKeyBindings,\n      rowIndex: focusedRow.current,\n      cellIndex: focusedCell.current,\n    })\n    : { ...defaultKeyBindings, ...keyBindings }\n\n\n  const onKeyDown = (e) => {\n    if (e.target.tagName.toLowerCase() === 'input') return\n    const action = nextKeyBindings[e.key]\n    if (isFunction(action)) action(e)\n  }\n\n  const activate = (container) => {\n    container.addEventListener('keydown', onKeyDown, true)\n  }\n\n  const deactivate = (container) => {\n    container.removeEventListener('keydown', onKeyDown, true)\n  }\n\n  useEffect(() => {\n    activate(containerRef.current)\n    return () => {\n      deactivate(containerRef.current)\n    }\n  }, [])\n\n\n  const valueProvider = useMemo(() => ({\n    register,\n  }), [])\n\n  return (\n    <Provider value={valueProvider}>\n      {decoratedChild}\n    </Provider>\n  )\n}\n","/* eslint-disable no-loops/no-loops, no-cond-assign */\nexport const objectType = (obj) => {\n  return Object.prototype.toString.call(obj).slice(8, -1)\n}\nexport const isDefined = (param) => {\n  return typeof param !== 'undefined'\n}\nexport const isUndefined = (param) => {\n  return typeof param === 'undefined'\n}\nexport const isFunction = (param) => {\n  return typeof param === 'function'\n}\nexport const isNumber = (param) => {\n  return typeof param === 'number' && !isNaN(param) // eslint-disable-line\n}\nexport const isString = (str) => {\n  return objectType(str) === 'String'\n}\nexport const isArray = (arr) => {\n  return objectType(arr) === 'Array'\n}\n\nexport const closest = (target, selector) => {\n  // closest(e.target, '.field')\n  while (target) { // eslint-disable-line\n    if (target.matches && target.matches(selector)) return target\n    if (target.msMatchesSelector && target.msMatchesSelector(selector)) return target\n    target = target.parentNode\n  }\n  return null\n}\n\nexport const getOffsetRect = (elem) => {\n  // (1)\n  const box = elem.getBoundingClientRect()\n\n  const { body, documentElement } = document\n\n  // (2)\n  const scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop\n  const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft\n\n  // (3)\n  const clientTop = documentElement.clientTop || body.clientTop || 0\n  const clientLeft = documentElement.clientLeft || body.clientLeft || 0\n\n  // (4)\n  const top = box.top + scrollTop - clientTop\n  const left = box.left + scrollLeft - clientLeft\n\n  return { top: Math.round(top), left: Math.round(left) }\n}\n\nexport const getTotalScroll = (elem) => {\n  let top = 0\n  let left = 0\n\n  while ((elem = elem.parentNode)) {\n    top += elem.scrollTop || 0\n    left += elem.scrollLeft || 0\n  }\n\n  return { top, left }\n}\n\nexport const getTransformProps = (x, y) => {\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n  }\n}\n\nexport const listWithChildren = (list, childrenProp) => {\n  return list.map((item) => {\n    return {\n      ...item,\n      [childrenProp]: item[childrenProp]\n        ? listWithChildren(item[childrenProp], childrenProp)\n        : [],\n    }\n  })\n}\n\nexport const getAllNonEmptyNodesIds = (items, childrenProp) => {\n  let childrenIds = []\n  const ids = items\n    .filter(item => item[childrenProp].length)\n    .map((item) => {\n      childrenIds = childrenIds.concat(getAllNonEmptyNodesIds(item[childrenProp], childrenProp))\n      return item.id\n    })\n\n  return ids.concat(childrenIds)\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport FocusGroupManager from './FocusGroupManager'\n\nexport default function FocusGroupHoc(WrappedComponent, options = {}) {\n  return ({\n    onExitFocusGroup, onFocusPrevGroup, focusKeyBindings, ...props\n  }) => (\n    <FocusGroupManager\n      keyBindings={focusKeyBindings}\n      onExitFocusGroup={onExitFocusGroup}\n      onFocusPrevGroup={onFocusPrevGroup}\n      {...options}\n    >\n      <WrappedComponent {...props} {...options} />\n    </FocusGroupManager>\n  )\n}\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = WrappedComponent =>\n  class extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n    static defaultProps = {\n      onSearch: () => null,\n      onKeyUp: () => null,\n      property: 'all',\n      searchOnEnter: true,\n      clearOnSearch: false,\n      containerProps: {},\n    };\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n        prevPropValue: '',\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      // if (this.buttonRef.current) this.buttonRef.current.focus()\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter } = this.props;\n\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  };\n\nexport default withSearchable;\n","import React, { Component } from 'react'\nimport { debounce } from '@elliemae/ds-utilities/utils'\nimport SearchIcon from '@elliemae/ds-icons/Search'\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport DSExpandableInput from '@elliemae/ds-basic/form/ExpandableInput'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport withSearchable from './withSearchable'\n\nconst blockName = 'searchbox-toggle'\nconst SearchBoxContainer = aggregatedClasses('div')(blockName)\n\nclass SearchBoxToggle extends Component {\n  hideInput = debounce(this.handleHideInput, 100)\n  showInput = debounce(this.handleShowInput, 100)\n  constructor(props) {\n    super(props)\n    this.state = {\n      isOpen: false,\n    }\n\n    this.hideInput = this.hideInput.bind(this)\n    this.showInput = this.showInput.bind(this)\n    this.handleHideInput = this.handleHideInput.bind(this)\n    this.handleShowInput = this.handleShowInput.bind(this)\n  }\n  componentDidUpdate(prevProps) {\n    const { clearOnSearch, value } = this.props\n    const { value: prevValue } = prevProps\n    if (clearOnSearch && value !== prevValue && !value && prevValue && prevValue.length !== 1) {\n      this.handleHideInput(false)\n    }\n  }\n  handleSearch() {\n    const { onSearch, clearOnSearch } = this.props\n    onSearch()\n    if (clearOnSearch) this.setState({ isOpen: false })\n  }\n  handleHideInput(executeIfValue = true) {\n    const { value } = this.props\n    if (value) {\n      if (executeIfValue) this.handleSearch()\n    } else {\n      this.setState({ isOpen: false })\n    }\n  }\n  handleBlur(e) {\n    if (this.expandableEl.contains(e.target)) return\n    this.hideInput(false)\n  }\n  handleShowInput() {\n    this.setState({ isOpen: true })\n  }\n  render() {\n    const {\n      onChange,\n      onKeyUp,\n      value,\n      placeholder,\n      clearable,\n      className,\n      buttonRef,\n      containerProps,\n      width = 300,\n    } = this.props\n    const { isOpen } = this.state\n    return (\n      <SearchBoxContainer>\n        <DSExpandableInput\n          containerProps={containerProps}\n          innerRef={node => (this.expandableEl = node)}\n          isOpen={isOpen}\n          onBlur={this.handleBlur}\n          onClose={this.hideInput}\n          onOpen={this.showInput}\n          triggerComponent={<DSButton key='handler' buttonType='text' icon={<SearchIcon />} innerRef={buttonRef} />}\n          width={width}\n        >\n          <DSTextBox\n            className={`expandable-input__input ${className}`}\n            clearable={clearable}\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            placeholder={placeholder}\n            showIcon={false}\n            value={value}\n          />\n        </DSExpandableInput>\n      </SearchBoxContainer>\n    )\n  }\n}\n\nexport default withSearchable(SearchBoxToggle)\n","/* eslint-disable react/no-unused-state */\nimport React from 'react'\nimport Search from '@elliemae/ds-icons/Search'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox'\nimport withSearchable from './withSearchable'\n\nfunction SearchBoxImpl({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  readOnly,\n  value,\n  clearable,\n}) {\n  return (\n    <DSTextBox\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      innerRef={innerRef}\n      onChange={onChange}\n      onKeyUp={onKeyUp}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      rightComponent={showIcon && (\n        <DSButton\n          buttonType='text'\n          icon={<Search />}\n          iconSize='s'\n          onClick={onSearch}\n        />\n      )}\n      style={style}\n      value={value}\n    />\n  )\n}\n\nexport default withSearchable(SearchBoxImpl)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n  toggleSearchInput = false,\n}) => {\n  return (\n    <SearchBoxImpl\n      className={className}\n      clearOnSearch={clearOnSearch}\n      containerProps={containerProps}\n      disabled={disabled}\n      innerRef={innerRef}\n      onKeyUp={onKeyUp}\n      onSearch={onSearch}\n      placeholder={placeholder}\n      property={property}\n      readOnly={readOnly}\n      searchIcon={searchIcon}\n      searchOnEnter={searchOnEnter}\n      showIcon={showIcon}\n      style={style}\n      toggleSearchInput={toggleSearchInput}\n      value={value}\n    />\n  );\n};\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.instanceOf(Element),\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Whether to toggle the search input or not\n   */\n  toggleSearchInput: PropTypes.bool,\n  /**\n   * Disables the search input\n   */\n  disabled: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","/* eslint-disable */\nimport createIcon from './utils/createIcon'\n\nexport default createIcon({\n  paths: ['M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',],\n  height: 20,\n  width: 20,\n})\n","import React, { Component, cloneElement } from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport { isFunction } from '@elliemae/ds-shared/utils'\nimport { InputAddonWrapper } from '@elliemae/ds-basic/form/Input'\n\nconst blockName = 'expandable-input'\n\nconst ExpandableInput = aggregatedClasses('div')(blockName, null, ({ isOpen }) => ({ opened: isOpen }))\nconst InputWrapper = aggregatedClasses(InputAddonWrapper)(blockName, 'wrapper', ({ isOpen }) => ({ opened: isOpen }))\n\nexport default class ExpandableInputImpl extends Component {\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props\n    if (isOpen && isOpen !== prevProps.isOpen) this.input.focus()\n  }\n  render() {\n    const {\n      innerRef,\n      triggerComponent,\n      children,\n      width,\n      isOpen,\n      onOpen,\n      onClose,\n      onBlur,\n      containerProps,\n    } = this.props\n    const InputComponent = React.Children.only(children)\n    const handleTriggerClick = (e) => {\n      if (isFunction(triggerComponent.onClick)) triggerComponent.onClick(e)\n      if (isOpen) {\n        onClose()\n      } else {\n        onOpen()\n      }\n    }\n\n    return (\n      <ExpandableInput\n        {...containerProps}\n        classProps={{ isOpen }}\n        innerRef={innerRef}\n        style={{ width: isOpen && width }}\n      >\n        <InputWrapper\n          rightComponents={[\n            cloneElement(triggerComponent, {\n              key: 'handler',\n              onClick: handleTriggerClick,\n            }),\n          ]}\n        >\n          {cloneElement(InputComponent, {\n            className: 'expandable-input__input',\n            innerRef: node => this.input = node,\n            onBlur,\n          })}\n        </InputWrapper>\n      </ExpandableInput>\n    )\n  }\n}\n","import React from 'react'\nimport ExpandableInputImpl from './ExpandableInputImpl'\n\nconst DSExpandableInput = ({\n  containerProps = {},\n  innerRef,\n  className = '',\n  style = {},\n  triggerComponent = undefined,\n  children,\n  isOpen = false,\n  onOpen = () => null,\n  onClose = () => null,\n  onBlur = () => null,\n  width = undefined,\n}) => {\n  return (\n    <ExpandableInputImpl\n      className={className}\n      containerProps={containerProps}\n      innerRef={innerRef}\n      isOpen={isOpen}\n      onBlur={onBlur}\n      onClose={onClose}\n      onOpen={onOpen}\n      style={style}\n      triggerComponent={triggerComponent}\n      width={width}\n    >\n      {children}\n    </ExpandableInputImpl>\n  )\n}\n\nexport default DSExpandableInput\n","// eslint-disable-next-line max-statements\nexport default function getNextCellPosition({\n  grid,\n  currentRow = 0,\n  currentCell = 0,\n  directionY,\n  directionX,\n  shouldWrapCells,\n  shouldWrapRows,\n}) {\n  let nextRow = currentRow + directionY\n  let nextCell = currentCell + directionX\n  const rowCount = grid.length\n  const isLeftRight = directionX !== 0\n\n  if (!rowCount) {\n    return false\n  }\n\n  const cellsLength = grid[0].length\n\n  // moving horizontally\n  if (shouldWrapCells && isLeftRight) {\n    // to left\n    if (nextCell < 0) {\n      nextCell = cellsLength - 1\n      nextRow -= 1\n    }\n\n    if (nextCell >= cellsLength) {\n      nextCell = 0\n      nextRow += 1\n    }\n  }\n\n  // moving vertically\n  if (shouldWrapRows && !isLeftRight) {\n    // to top\n    if (nextRow < 0) {\n      nextCell -= 1\n      nextRow = rowCount - 1\n      if (grid[nextRow] && nextCell >= 0 && !grid[nextRow][nextCell]) {\n        nextRow -= 1\n      }\n    } else if (nextRow >= rowCount || !grid[nextRow][nextCell]) {\n      nextRow = 0\n      nextCell += 1\n    }\n  }\n\n  return {\n    cellIndex: nextCell,\n    rowIndex: nextRow,\n  }\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = require('react');\nvar React__default = _interopDefault(React);\nvar hotkeys = _interopDefault(require('hotkeys-js'));\n\nfunction useHotkeys(_ref) {\n  var keys = _ref.keys,\n      handler = _ref.handler,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var memoizedCallback = React.useCallback(handler, deps);\n  React.useEffect(function () {\n    hotkeys(keys, options, memoizedCallback);\n    return function () {\n      return hotkeys.unbind(keys);\n    };\n  }, [memoizedCallback]);\n}\n\nmodule.exports = useHotkeys;\n"],"sourceRoot":""}