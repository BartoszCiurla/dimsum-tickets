{"version":3,"sources":["../../../../src/Toolbar/decorateToolbarChildren.js","../../../../src/Toolbar/ToolbarItem.js","../../../../src/Toolbar/ToolbarGroup.js","../../../../src/Toolbar/ToolbarDivider.js","../../../../src/Toolbar/DSToolbar.js","../../../src/form/RequiredMark/RequiredMark.js","../../../../src/Breadcrumb/DSBreadcrumbItem.js","../../../../src/Breadcrumb/DSBreadcrumb.js","../../../../src/PageHeader/v2/components/blocks.js","../../../../src/PageHeader/v2/components/PageHeaderTitle/PageHeaderTitle.js","../../../../src/PageHeader/v2/components/PageHeaderEditableTitle/PageHeaderEditableTitle.js","../../../../src/PageHeader/v2/components/PageHeaderSummary/PageHeaderSummary.js","../../../../src/PageHeader/v2/components/PageHeaderMenu/PageHeaderMenu.js","../../../../src/PageHeader/v2/components/PageHeaderToolbar/PageHeaderToolbar.js","../../../../src/PageHeader/v2/components/PageHeaderBack/PageHeaderBack.js","../../../../src/PageHeader/v2/PageHeader.js","../../../../src/PageHeader/v1/Title.js","../../../../src/PageHeader/v1/EditableTitle.js","../../../../src/PageHeader/v1/TitleWrapper.js","../../../../src/PageHeader/v1/DropdownTitle.js","../../../../src/PageHeader/v1/PageHeaderImpl.js","../../../../src/PageHeader/v1/DSPageHeader.js"],"names":["children","extraProps","component","cloneElement","className","ToolbarItem","icon","labelText","menu","undefined","otherProps","ref","useRef","useFocusGroupItem","btn","buttonType","innerRef","placement","Position","triggerComponent","PropTypes","string","ToolbarGroupContainer","space","ToolbarGroup","size","classProps","decorateToolbarChildren","aggregatedClasses","ToolbarDivider","ToolbarContainer","withDepth","alignment","DSToolbar","containerProps","autoFocusOnMount","containerRef","getContainer","keyBindings","Tab","orientation","mergeRefs","cssClassName","convertPropToCssClassName","RequiredMark","required","optional","DSBreadcrumbItem","containerComponent","as","LinkComponent","active","href","onClick","label","rest","CrumbWrapper","Link","aria-current","data-testid","DSBreadcrumb","Component","SafeComponent","indexOf","NavContainer","aria-label","i","child","isRequired","blockName","PageHeaderTitleWrapper","PageHeaderBackWrapper","PageHeaderSummaryWrapper","PageHeaderMenuWrapper","PageHeaderToolbarWrapper","PageHeaderTitle","showMarker","value","styled","bool","PageHeaderSummary","PageHeaderMenu","PageHeaderToolbar","PageHeaderBack","theme","Container","ContainerWBorder","DSPageHeaderV2","breadcrumbs","pageTitle","backarrow","summary","toolbar","mainRow","compact","pageTitleRow","useState","activeEditing","setActiveEditing","activeEditingStyle","opacity","pointerEvents","cols","style","rows","onBlur","onFocus","Title","EditableTitleComponent","EditableTitle","editingProp","editing","titleInputProps","titleValue","setTitleValue","hovered","setHovered","useDerivedStateFromProps","setEditing","titleRef","runAll","onChange","e","onMouseOut","onMouseEnter","DropdownTitle","titleComponent","onSelectOption","options","optionsMinWidth","selection","zIndex","minWidth","onSelectMenuItem","PageHeaderContainer","PageHeaderMainSection","PageHeaderTitleSection","PageHeaderBreadcrumb","Subtitle","BackArrow","HeaderTitle","title","subtitle","editable","PageHeaderImpl","titleOptions","renderToolbar","previousPage","onGoToPreviousPage","withBottomSeparator","optionsSelection","hasBreadcrumbs","DSIconSizes","M","breadcrumb","key","isFunction","DSPageHeader","version","number"],"mappings":"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","file":"static/js/19.abf6c14a.chunk.js","sourcesContent":["import React, { cloneElement } from 'react'\n\nexport default (children, extraProps = {}) => (\n  React.Children.map(children,\n    component => (component ? cloneElement(component, {\n      ...extraProps,\n      ...component.props,\n      className: `${component.props.className} toolbar-item`,\n    }) : component), null)\n)\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport { useFocusGroupItem } from '@elliemae/ds-shared/esm/FocusGroup'\nimport { Position } from '../Popper/positions'\n\nconst ToolbarItem = ({\n  icon,\n  labelText,\n  menu = undefined,\n  ...otherProps\n}) => {\n  const ref = useRef(null)\n\n  useFocusGroupItem(ref)\n  const btn = (\n    <DSButton\n      {...otherProps}\n      buttonType='text'\n      icon={icon}\n      innerRef={ref}\n      labelText={labelText}\n    />\n  )\n  if (menu) {\n    return React.cloneElement(menu, {\n      ...menu.props,\n      placement: Position.BOTTOM_END,\n      triggerComponent: btn,\n    })\n  }\n  return btn\n}\n\nToolbarItem.displayName = 'ToolbarItem'\n\nToolbarItem.propTypes = {\n  icon: PropTypes.element,\n  labelText: PropTypes.string,\n}\n\nexport default ToolbarItem\n","import React from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport decorateToolbarChildren from './decorateToolbarChildren'\n\nconst blockName = 'toolbar-group'\n\nconst ToolbarGroupContainer = aggregatedClasses('div')(blockName, null, ({ space }) => ({\n  [`space-${space}`]: !!space,\n}))\n\nconst ToolbarGroup = ({ children, size, space = 0 }) => {\n  return (\n    <ToolbarGroupContainer\n      classProps={{ space }}\n    >\n      {decorateToolbarChildren(children, { size })}\n    </ToolbarGroupContainer>\n  )\n}\n\nexport default ToolbarGroup\n","import { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'toolbar'\n\nconst ToolbarDivider = aggregatedClasses('div')(blockName, 'divider')\n\nToolbarDivider.displayName = 'ToolbarDivider'\n\nexport default ToolbarDivider\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","import React from 'react'\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames'\n\nconst { cssClassName } = convertPropToCssClassName('form-required-mark')\nconst RequiredMark = ({\n  required = false,\n  optional = false,\n}) => {\n  if (!required && !optional) return null\n  if (required) {\n    return (\n      <span className={`${cssClassName}`}>\n          &#9679;\n      </span>\n    )\n  }\n  return (\n    <span className={`${cssClassName} optional-mark`}>\n      &#9900;\n    </span>\n  )\n}\n\nexport default RequiredMark\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'breadcrumb'\n\nfunction DSBreadcrumbItem({\n  containerComponent = 'li',\n  as: LinkComponent = 'a',\n  active = false,\n  href = undefined,\n  onClick = () => null,\n  label = '',\n  ...rest\n}) {\n  const CrumbWrapper = aggregatedClasses(containerComponent)(blockName, 'crumb', ({ active }) => ({ active }))\n  const Link = aggregatedClasses(LinkComponent)(blockName, 'label')\n  return (\n    <CrumbWrapper\n      aria-current={active ? 'page' : undefined}\n      data-testid='breadcrumb-item-container'\n      classProps={{ active }}\n      {...rest}\n    >\n      <Link\n        href={href}\n        onClick={onClick}\n      >\n        {label}\n      </Link>\n    </CrumbWrapper>\n  )\n}\n\nDSBreadcrumbItem.propTypes = {\n  containerComponent: PropTypes.string,\n  as: PropTypes.string,\n  active: PropTypes.bool,\n  href: PropTypes.string,\n  onClick: PropTypes.func,\n  label: PropTypes.string,\n}\n\nexport default DSBreadcrumbItem\n","/* eslint-disable no-shadow */\nimport React, { cloneElement } from 'react'\nimport PropTypes from 'prop-types'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport DSBreadcrumbItem from './DSBreadcrumbItem'\n\nconst blockName = 'breadcrumb'\n\nconst DSBreadcrumb = ({\n  containerProps = {},\n  as: Component = 'nav',\n  label = 'Breadcrumb',\n  children,\n  ...rest\n}) => {\n  const SafeComponent = ['nav', 'div', 'header', 'footer', 'main'].indexOf(Component) > -1 ? Component : 'nav'\n  const NavContainer = aggregatedClasses(SafeComponent)(blockName)\n\n  return (\n    <NavContainer\n      aria-label={label}\n      data-testid='breadcrumb-nav-container'\n      {...rest}\n      {...containerProps}\n    >\n      <ol data-testid='list-container'>\n        {React.Children.map(children, (child, i) => (i < children.length - 1\n          ? child\n          : cloneElement(child, { active: true })))}\n      </ol>\n    </NavContainer>\n  )\n}\n\nDSBreadcrumb.Item = DSBreadcrumbItem\n\nDSBreadcrumb.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Type of element you want the main container to be:\n   * 'nav', 'div', 'header', 'footer', 'main'\n   */\n  as: PropTypes.string,\n  label: PropTypes.string,\n  /**\n   * Container items to wrap\n   */\n  children: PropTypes.arrayOf(DSBreadcrumbItem).isRequired,\n}\n\nexport { DSBreadcrumbItem }\nexport default DSBreadcrumb\n","import { cssPrefix } from '@elliemae/ds-classnames/aggregatedClasses'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport DSInput from '@elliemae/ds-basic/form/Input'\n\nconst blockName = 'page-header-v2'\n\nexport const PageHeaderTitleWrapper = aggregatedClasses('div')(`${blockName}-title`, 'title')\nexport const EditableTitleComponent = aggregatedClasses(DSInput)(`${blockName}-title`, 'editable-title')\nexport const PageHeaderBackWrapper = aggregatedClasses('div')(`${blockName}-back`)\nexport const PageHeaderSummaryWrapper = aggregatedClasses('div')(`${blockName}-summary`)\nexport const PageHeaderMenuWrapper = aggregatedClasses('div')(`${blockName}-menu`)\nexport const PageHeaderToolbarWrapper = aggregatedClasses('div')(`${blockName}-toolbar`)\nexport { cssPrefix }\n","import React from 'react'\nimport DSTruncatedTooltipText from '@elliemae/ds-basic/TruncatedTooltipText'\nimport RequiredMark from '@elliemae/ds-basic/form/RequiredMark'\nimport { PageHeaderTitleWrapper } from '../blocks'\n\nexport const PageHeaderTitle = ({ children, showMarker = false, ...rest }) => (\n  <PageHeaderTitleWrapper {...rest}>\n    <DSTruncatedTooltipText value={children} />\n    {showMarker && <RequiredMark required />}\n  </PageHeaderTitleWrapper>\n)\n","import React, { useRef, useState } from 'react'\nimport { noop } from 'lodash'\nimport styled from 'styled-components'\nimport { useMeasure } from '@elliemae/ds-utilities/hooks'\nimport useDerivedStateFromProps from '@elliemae/ds-utilities/hooks/useDerivedStateFromProps'\nimport PropTypes from 'prop-types'\nimport { runAll } from '@elliemae/ds-utilities/utils'\nimport { EditableTitleComponent } from '../blocks'\nimport { PageHeaderTitle } from '../PageHeaderTitle/PageHeaderTitle'\n\nconst EditableContainer = styled.div`\n  height: 32px;\n  position: relative;\n  overflow: hidden;\n`\n\nexport const PageHeaderEditableTitle = ({\n  children: value,\n  editing: editingProp = false,\n  onBlur = noop,\n  onChange = noop,\n  onFocus = noop,\n  onMouseOut = noop,\n  showMarker = false,\n  ...rest\n}) => {\n  const [titleValue, setTitleValue] = useState(value)\n  const [hovered, setHovered] = useState(false)\n  const [editing, setEditing] = useDerivedStateFromProps(editingProp || false)\n  const titleRef = useRef(null)\n  const { width } = useMeasure(titleRef)\n  return (\n    <EditableContainer className={hovered || editing ? 'editable-title-component' : ''} editing={editing}>\n      {(hovered || editing) && (\n        <EditableTitleComponent\n          {...rest}\n          onBlur={runAll(() => setEditing(false), onBlur)}\n          onChange={runAll(e => setTitleValue(e.target.value), onChange)}\n          onFocus={runAll(() => setEditing(true), onFocus)}\n          onMouseOut={runAll(() => setHovered(false), onMouseOut)}\n          style={{ width: width - 2, minWidth: '260px' }}\n          value={titleValue}\n        />\n      )}\n      <div ref={titleRef} onMouseEnter={() => setHovered(true)}>\n        <PageHeaderTitle showMarker={showMarker && !hovered && !editing}>\n          {titleValue}\n        </PageHeaderTitle>\n      </div>\n    </EditableContainer>\n  )\n}\n\nPageHeaderEditableTitle.propTypes = {\n  /** The title text*/\n  children: PropTypes.string,\n  /** Whether the title is editing or not*/\n  editing: PropTypes.bool,\n  /** Show error marker*/\n  showMarker: PropTypes.bool,\n}\n\nexport default PageHeaderEditableTitle\n","import React from 'react'\nimport { PageHeaderSummaryWrapper } from '../blocks'\n\nexport const PageHeaderSummary = ({ value = null, label = '', ...rest }) => (\n\n  <PageHeaderSummaryWrapper {...rest}>\n    {value && <div className='ph-summary-value'>{value}</div>}\n    {label && <div className='ph-summary-label'>{label}</div>}\n    {(value || label) && <div className='ph-summary-space' />}\n  </PageHeaderSummaryWrapper>\n)\n","import React from 'react'\nimport { PageHeaderMenuWrapper } from '../blocks'\n\nexport const PageHeaderMenu = ({ children, ...rest }) => (\n  <PageHeaderMenuWrapper {...rest}>\n    {children}\n  </PageHeaderMenuWrapper>\n)\n","import React from 'react'\nimport { PageHeaderToolbarWrapper } from '../blocks'\n\nexport const PageHeaderToolbar = ({ children, ...rest }) => (\n  <PageHeaderToolbarWrapper {...rest}>\n    {children}\n  </PageHeaderToolbarWrapper>\n)\n","import React from 'react'\nimport { PageHeaderBackWrapper } from '../blocks'\n\nexport const PageHeaderBack = ({ children, ...rest }) => (\n  <PageHeaderBackWrapper {...rest}>\n    {children}\n  </PageHeaderBackWrapper>\n)\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { compact } from 'lodash'\nimport { Grid } from '@elliemae/ds-basic/Grid'\nimport styled from 'styled-components'\nimport theme from '@elliemae/ds-system/theme'\nimport { PageHeaderTitle } from './components/PageHeaderTitle/PageHeaderTitle'\nimport { PageHeaderEditableTitle } from './components/PageHeaderEditableTitle/PageHeaderEditableTitle'\nimport { PageHeaderSummary } from './components/PageHeaderSummary/PageHeaderSummary'\nimport { PageHeaderMenu } from './components/PageHeaderMenu/PageHeaderMenu'\nimport { PageHeaderToolbar } from './components/PageHeaderToolbar/PageHeaderToolbar'\nimport { PageHeaderBack } from './components/PageHeaderBack/PageHeaderBack'\nimport { cssPrefix } from './components/blocks'\n\nconst PageHeaderCustomRenderer = styled.div`\n  width: auto;\n  color: ${theme.colors.brand[800]};\n  font-style: italic;\n  font-size: 0.8rem;\n`\n\nconst Container = styled.div`  \n  width: 100%;\n  margin-bottom: ${theme.space[1]};\n`\nconst ContainerWBorder = styled.div`\n  width: 100%;\n  padding-bottom: ${theme.space[1]};\n  border-bottom: solid 1px ${theme.colors.neutral[400]};\n`\nconst getActiveEditing = editing => (editing ? {\n  opacity: 0.5,\n  pointerEvents: 'none',\n} : {})\n\nexport const DSPageHeaderV2 = ({\n  containerProps = {},\n  breadcrumbs = null,\n  pageTitle = null,\n  backarrow = null,\n  summary = null,\n  toolbar = null,\n  menu = null,\n}) => {\n  const wrapperRow = ['auto', 1]\n  const mainRow = compact([1, '268px'])\n  const pageTitleRow = compact(['auto', menu && '30px', summary && 'auto', 1])\n  const [activeEditing, setActiveEditing] = useState(false)\n  const activeEditingStyle = getActiveEditing(activeEditing)\n  return (\n    <Container {...containerProps}>\n      <ContainerWBorder>\n        <Grid cols={wrapperRow}>\n          <Grid>\n            <PageHeaderBack style={activeEditingStyle}>\n              {backarrow}\n            </PageHeaderBack>\n          </Grid>\n          <Grid rows={['auto', 'auto']}>\n            <Grid className={`${cssPrefix}-page-header-v2-breadcrumb`} style={activeEditingStyle}>\n              {breadcrumbs}\n            </Grid>\n            <Grid cols={mainRow}>\n              <Grid cols={pageTitleRow}>\n                {React.cloneElement(pageTitle, {\n                  onBlur: (e) => {\n                    setActiveEditing(false)\n                    if (pageTitle.props.onBlur) pageTitle.props.onBlur(e)\n                  },\n                  onFocus: (e) => {\n                    setActiveEditing(true)\n                    if (pageTitle.props.onFocus) pageTitle.props.onFocus(e)\n                  },\n                })}\n                {menu && (\n                  <PageHeaderMenu>\n                    {menu}\n                  </PageHeaderMenu>\n                )}\n                {summary}\n                <div />\n              </Grid>\n              <Grid>\n                <PageHeaderToolbar>\n                  {toolbar}\n                </PageHeaderToolbar>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </ContainerWBorder>\n    </Container>\n  )\n}\n\nDSPageHeaderV2.propTypes = {\n  containerProps: PropTypes.shape({}),\n}\n\nexport {\n  PageHeaderTitle,\n  PageHeaderEditableTitle,\n  PageHeaderSummary,\n  PageHeaderMenu,\n  PageHeaderCustomRenderer,\n}\n","import { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'page-header'\n\nconst Title = aggregatedClasses('span')(`${blockName}-title`, 'title')\n\nexport default Title\n","import React, { useRef, useState } from 'react'\nimport useDerivedStateFromProps from '@elliemae/ds-utilities/hooks/useDerivedStateFromProps'\nimport PropTypes from 'prop-types'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport { runAll } from '@elliemae/ds-utilities/utils'\nimport DSInput from '@elliemae/ds-basic/form/Input'\nimport Title from './Title'\n\nconst blockName = 'page-header'\n\nconst EditableTitleComponent = aggregatedClasses(DSInput)(`${blockName}-title`, 'editable-title')\n\nfunction EditableTitle({\n  children: value,\n  editing: editingProp,\n  titleInputProps,\n}) {\n  const [titleValue, setTitleValue] = useState(value)\n  const [hovered, setHovered] = useState(false)\n  const [editing, setEditing] = useDerivedStateFromProps(editingProp || false)\n  const titleRef = useRef(null)\n  return (\n    <>\n      {hovered || editing ? (\n        <EditableTitleComponent\n          {...titleInputProps}\n          onBlur={runAll(() => setEditing(false), titleInputProps.onBlur)}\n          onChange={runAll(e => setTitleValue(e.target.value), titleInputProps.onChange)}\n          onFocus={runAll(() => setEditing(true), titleInputProps.onFocus)}\n          onMouseOut={runAll(() => setHovered(false), titleInputProps.onMouseOut)}\n          value={titleValue}\n        />\n      ) : (<Title ref={titleRef} onMouseEnter={() => setHovered(true)}>{titleValue}</Title>)}\n    </>\n  )\n}\n\nEditableTitle.propTypes = {\n  /** The title text*/\n  children: PropTypes.string,\n  /** Whether the title is editing or not*/\n  editing: PropTypes.bool,\n}\n\nexport default EditableTitle\n","import { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'page-header'\n\nexport default aggregatedClasses('span')(`${blockName}-title-wrapper`)\n","import React from 'react'\nimport DSDropdownMenu from '@elliemae/ds-dropdownmenu'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport ChevronSmallDown from '@elliemae/ds-icons/ChevronSmallDown'\nimport TitleWrapper from './TitleWrapper'\n\n\nfunction DropdownTitle({\n  titleComponent,\n  onSelectOption,\n  options,\n  optionsMinWidth,\n  selection,\n  zIndex,\n}) {\n  return (\n    <TitleWrapper>\n      {titleComponent}\n      <DSDropdownMenu\n        minWidth={optionsMinWidth}\n        onSelectMenuItem={onSelectOption}\n        options={options}\n        selection={selection}\n        triggerComponent={(\n          <DSButton\n            buttonType='text'\n            data-testid='page-header-dropdown-trigger-component'\n            icon={<ChevronSmallDown />}\n          />\n        )}\n        zIndex={zIndex}\n      />\n    </TitleWrapper>\n  )\n}\n\nDropdownTitle.propTypes = {}\n\nexport default DropdownTitle\n","import React from 'react'\nimport { isFunction } from '@elliemae/ds-utilities/utils'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport DSBreadcrumb from '@elliemae/ds-basic/Breadcrumb'\nimport ChevronLeft from '@elliemae/ds-icons/ChevronLeft'\nimport { DSIconSizes } from '@elliemae/ds-basic/Icon'\nimport EditableTitle from './EditableTitle'\nimport Title from './Title'\nimport DropdownTitle from './DropdownTitle'\n\n\nconst blockName = 'page-header'\n\nconst PageHeaderContainer = aggregatedClasses('div')(blockName, null, ({ withBottomSeparator, subtitle }) => ({\n  'with-bottom-separator': withBottomSeparator,\n  'with-subtitle': subtitle,\n}))\n\nconst PageHeaderMainSection = aggregatedClasses('div')(`${blockName}-main-section`)\nconst PageHeaderTitleSection = aggregatedClasses('div')(`${blockName}-title-section`)\nconst PageHeaderToolbar = aggregatedClasses('div')(`${blockName}-toolbar`,\n  null, () => ({ 'ie-flex-basis-auto': true }))\nconst PageHeaderBreadcrumb = aggregatedClasses(DSBreadcrumb)(`${blockName}-breadcrumb`)\n\nconst PageHeaderTitle = aggregatedClasses('div')(`${blockName}-title`)\nconst Subtitle = aggregatedClasses('div')(`${blockName}-title`, 'subtitle')\nconst BackArrow = aggregatedClasses(ChevronLeft)(`${blockName}-backarrow`)\n\nfunction HeaderTitle({\n  title = '',\n  options = [],\n  optionsMinWidth,\n  onSelectOption = () => null,\n  selection,\n  subtitle = '',\n  editable = false,\n  editing = false,\n  titleInputProps,\n  zIndex,\n}) {\n  const titleComponent = editable\n    ? (\n      <EditableTitle\n        editing={editing}\n        titleInputProps={titleInputProps}\n      >\n        {title}\n      </EditableTitle>\n    )\n    : <Title>{title}</Title>\n\n  return (\n    <PageHeaderTitle>\n      {options.length\n        ? (\n          <DropdownTitle\n            onSelectOption={onSelectOption}\n            options={options}\n            optionsMinWidth={optionsMinWidth}\n            selection={selection}\n            titleComponent={titleComponent}\n            zIndex={zIndex}\n          />\n        )\n        : titleComponent\n      }\n      {subtitle && <Subtitle>{subtitle}</Subtitle>}\n    </PageHeaderTitle>\n  )\n}\n\nfunction PageHeaderImpl({\n  containerProps,\n  className,\n  title,\n  titleOptions,\n  renderToolbar,\n  breadcrumbs = [],\n  previousPage,\n  onGoToPreviousPage = () => null,\n  subtitle = '',\n  withBottomSeparator,\n  onSelectOption,\n  optionsSelection,\n  optionsMinWidth,\n  editable = false,\n  titleInputProps,\n  editing = undefined,\n  zIndex,\n}) {\n  const hasBreadcrumbs = !!breadcrumbs.length\n\n  return (\n    <PageHeaderContainer\n      {...containerProps}\n      className={className}\n      classProps={{\n        withBottomSeparator,\n        subtitle,\n      }}\n    >\n      { previousPage && (\n      <BackArrow\n        data-testid='back-arrow'\n        onClick={onGoToPreviousPage}\n        size={DSIconSizes.M}\n      />\n      )}\n      <PageHeaderMainSection>\n        { hasBreadcrumbs && (\n        <PageHeaderBreadcrumb>\n          {breadcrumbs.map(breadcrumb => (\n            <DSBreadcrumb.Item\n              key={breadcrumb.label}\n              {...breadcrumb}\n            />\n          ))}\n        </PageHeaderBreadcrumb>\n        )}\n        { previousPage && (\n        <DSBreadcrumb.Item\n          key={previousPage.id}\n          label={previousPage.title}\n          onClick={previousPage.onClick}\n          {...previousPage}\n        />\n        )}\n        <PageHeaderTitleSection>\n          <HeaderTitle\n            editable={editable}\n            editing={editing}\n            onSelectOption={onSelectOption}\n            options={titleOptions}\n            optionsMinWidth={optionsMinWidth}\n            selection={optionsSelection}\n            subtitle={subtitle}\n            title={title}\n            titleInputProps={titleInputProps}\n            zIndex={zIndex}\n          />\n          { isFunction(renderToolbar) && (\n          <PageHeaderToolbar>\n            { renderToolbar() }\n          </PageHeaderToolbar>\n          )}\n        </PageHeaderTitleSection>\n      </PageHeaderMainSection>\n    </PageHeaderContainer>\n  )\n}\n\n\nexport default PageHeaderImpl\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { TooltipTextProvider } from '@elliemae/ds-basic/TruncatedTooltipText'\nimport PageHeaderImpl from './PageHeaderImpl'\n\nconst DSPageHeader = ({\n  containerProps = {},\n  renderToolbar = undefined,\n  withBottomSeparator = true,\n  title = '',\n  titleOptions = undefined,\n  onSelectOption = () => null,\n  subtitle = '',\n  optionsSelection = {},\n  onGoToPreviousPage = () => null,\n  previousPage,\n  editable = false,\n  editing = undefined,\n  titleInputProps = {},\n  zIndex = 2,\n  optionsMinWidth = undefined,\n  ...otherProps\n}) => {\n  return (\n    <TooltipTextProvider>\n      <PageHeaderImpl\n        containerProps={containerProps}\n        editable={editable}\n        editing={editing}\n        onGoToPreviousPage={onGoToPreviousPage}\n        onSelectOption={onSelectOption}\n        optionsMinWidth={optionsMinWidth}\n        optionsSelection={optionsSelection}\n        previousPage={previousPage}\n        renderToolbar={renderToolbar}\n        subtitle={subtitle}\n        title={title}\n        titleInputProps={titleInputProps}\n        titleOptions={titleOptions}\n        withBottomSeparator={withBottomSeparator}\n        zIndex={zIndex}\n        {...otherProps}\n      />\n    </TooltipTextProvider>\n  )\n}\n\nDSPageHeader.propTypes = {\n  /* Component version */\n  version: PropTypes.oneOf([1, 2]),\n  /* Function that returns the toolbar to the right of the page header */\n  containerProps: PropTypes.shape({}),\n  /* Function that returns the toolbar to the right of the page header */\n  renderToolbar: PropTypes.func,\n  /* Whether to show a separator at the bottom of the header */\n  withBottomSeparator: PropTypes.bool,\n  /* The page header title */\n  title: PropTypes.string,\n  /* The title dropdown options */\n  titleOptions: PropTypes.arrayOf(PropTypes.object),\n  /* Handler when a user selects an item in the dropdown menu */\n  onSelectOption: PropTypes.func,\n  /* Description text below the title */\n  subtitle: PropTypes.string,\n  /* Selection state for the title dropdown */\n  optionsSelection: PropTypes.shape({}),\n  /* Whether the title is editable or not */\n  editable: PropTypes.bool,\n  /* Activates/Deactivates the editing state in the title */\n  editing: PropTypes.bool,\n  /* Props passed to the input for editing the title */\n  titleInputProps: PropTypes.shape({}),\n  /* Enables navigation to previous page with back-arrow */\n  previousPage: PropTypes.shape({}),\n  /* Callback to handle navigation to previous page */\n  onGoToPreviousPage: PropTypes.func,\n  /* z-index to use for the DropdownMenu */\n  zIndex: PropTypes.number,\n}\n\nexport default DSPageHeader\n"],"sourceRoot":""}