{"version":3,"sources":["SearchBox/PUI-3638.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../../../src/form/TextBox/DSTextBox.js"],"names":["clearable","value","placeholder","createIcon","paths","height","width","WrappedComponent","Searchable","debounce","props","React","this","onKeyUp","searchOnEnter","key","e","onSearch","property","clearOnSearch","setState","query","target","onChange","containerProps","rest","buttonRef","prevPropValue","nextProps","PropTypes","string","SearchBoxImpl","className","disabled","disableButton","innerRef","showIcon","style","onBlur","readOnly","rightComponent","buttonType","icon","iconSize","onClick","bool","withSearchable","DSSearchBox","searchIcon","DSTextBox","autoFocus","maxLength","minLength","fluidWidth","hasError","type","min","max","leftComponent","required","variant","otherProps","aria-label","role"],"mappings":"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","file":"static/js/32.b537d6f7.chunk.js","sourcesContent":["import React from 'react';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport DSSearchBox from '@elliemae/ds-basic/form/SearchBox';\n\nexport default () => {\n  return (\n    <div>\n      <DSTextBox clearable value=\"Textbox with clearable\" />\n      <DSSearchBox placeholder=\"Search without clearable\" />\n      <DSSearchBox\n        placeholder=\"Search with clearable (doesn't work)\"\n        clearable\n      />\n    </div>\n  );\n};\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport withSearchable from './withSearchable';\n\nconst SearchBoxImpl = ({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  onBlur,\n  readOnly,\n  value,\n  clearable,\n}) => (\n  <DSTextBox\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    innerRef={innerRef}\n    onChange={onChange}\n    onKeyUp={onKeyUp}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    rightComponent={\n      showIcon && (\n        <DSButton\n          disabled={disabled || disableButton}\n          buttonType=\"text\"\n          icon={<Search />}\n          iconSize=\"s\"\n          onClick={onSearch}\n        />\n      )\n    }\n    style={style}\n    value={value}\n  />\n);\n\nSearchBoxImpl.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  style: PropTypes.objectOf(PropTypes.string),\n  placeholder: PropTypes.string,\n  onKeyUp: PropTypes.func,\n  onSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  showIcon: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  clearable: PropTypes.bool,\n};\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  onBlur = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Function that is triggered on blur\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n"],"sourceRoot":""}