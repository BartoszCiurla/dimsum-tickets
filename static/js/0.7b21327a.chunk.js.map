{"version":3,"sources":["../../../../../src/form/Input/InputAddonWrapper.js","../../../../../src/form/Input/InputImpl.js","../../../../../src/form/Input/showEllipsis.js","../../../../../src/form/Input/DSInput.js","../../../src/CloseCircle.js","../../../../src/FocusGroup/FocusGrid.js","../../../src/form/TextBox/DSTextBox.js","../../../src/utils.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../../src/FocusGroup/focusGroupManagerHoc.js","../../../src/constants.js","../../../../../src/FocusGroup/utils/getNextCellPosition.js","../node_modules/@elliemae/ds-utilities/cjs/hooks/useHotkeys.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/SearchBox/SearchBoxToggle.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../src/Search.js","../../../../../src/form/ExpandableInput/ExpandableInputImpl.js","../../../../../src/form/ExpandableInput/DSExpandableInput.js"],"names":["InputWrapper","aggregatedClasses","InputAddon","left","right","variant","InputAddonWrapper","components","this","renderAddonComponent","Array","comp","containerProps","classProps","component","key","index","className","innerRef","rightComponents","leftComponents","children","InputComponent","React","hasError","readOnly","disabled","rightAddon","getRightAddon","leftAddon","getLeftAddon","Component","Input","clearable","value","WrapperForTooltipInput","InputCustomWrapper","ClearableButton","getValidComponents","noop","InputImpl","width","active","showTooltip","e","onBlur","onFocus","client","window","onClear","onChange","target","ref","current","focus","buttonType","data-testid","icon","onClick","handleClear","role","id","isShowElipsisActive","autoFocus","name","maxLength","minLength","placeholder","leftComponent","rightComponent","disableTooltip","onKeyDown","onKeyUp","onPaste","required","type","customInputType","min","max","onMouseLeave","onMouseOut","style","tabIndex","rest","filter","inputProps","autocomplete","onMouseEnter","String","showEllipsis","isOpen","title","zIndex","triggerComponent","PropTypes","props","Error","fluidWidth","undefined","otherProps","aria-label","createIcon","paths","height","FocusGridContext","createContext","Provider","preventDefault","shouldWrapRows","shouldWrapCells","shouldRefocus","keyBindings","hotKeys","focusedRow","useRef","focusedCell","grid","containerRef","child","decoratedChild","mergeRefs","getNode","rowIndex","cellIndex","get","register","node","columnIndex","prevNode","useEffect","focusNextCell","directionY","directionX","position","getNextCellPosition","currentCell","currentRow","Object","handler","options","useHotkeys","keys","registerHotKeysHooks","defaultKeyBindings","ArrowUp","runAll","ArrowRight","ArrowDown","ArrowLeft","Home","End","nextKeyBindings","defaultBindings","action","isFunction","activate","container","deactivate","valueProvider","useMemo","DSTextBox","string","param","TooltipType","TooltipContainer","TooltipText","DSTooltip","placement","PopperPositions","TOP","delayClose","DEFAULT_DELAY_CLOSE","delayOpen","DEFAULT_DELAY_OPEN","interactionType","PopperInteractions","HOVER","onOpen","springAnimationComponent","tooltipType","showArrow","otherTooltipProps","tooltipBlockName","convertPropToCssClassName","Content","blockName","contentComponent","getComponentFromProps","bool","WrappedComponent","onExitFocusGroup","onFocusPrevGroup","focusKeyBindings","nextRow","nextCell","rowCount","isLeftRight","cellsLength","_interopDefault","ex","require","hotkeys","module","exports","_ref","_ref$options","deps","arguments","length","memoizedCallback","useCallback","unbind","withSearchable","debounce","prevPropValue","searchOnEnter","onSearch","property","clearOnSearch","setState","query","buttonRef","nextProps","SearchBoxContainer","SearchBoxToggle","prevProps","prevValue","executeIfValue","handleSearch","expandableEl","contains","onClose","showIcon","iconSize","DSSearchBox","searchIcon","toggleSearchInput","ExpandableInput","opened","ExpandableInputImpl","input","cloneElement"],"mappings":"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","file":"static/js/0.7b21327a.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { Component } from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'input-addon-wrapper'\n\nconst InputWrapper = aggregatedClasses('div')(blockName)\nconst InputAddon = aggregatedClasses('span')(blockName, 'addon', ({ left, right, variant }) => ({\n  left,\n  right,\n  [variant]: variant,\n}))\n\n\nexport default class InputAddonWrapper extends Component {\n  static defaultProps = {\n    rightComponents: [],\n    leftComponents: [],\n    containerProps: {},\n  }\n  getLeftAddon(components) {\n    return this.renderAddonComponent(true, components)\n  }\n  getRightAddon(components) {\n    return this.renderAddonComponent(false, components)\n  }\n  renderAddonComponent(left = true, components) {\n    if (!components) return null\n    if (Array.isArray(components)) {\n      if (!components.filter(comp => comp).length) return null\n    }\n    const { containerProps } = this.props\n    const classProps = left\n      ? { left: true }\n      : { right: true }\n\n    return (\n      <InputAddon\n        classProps={classProps}\n        {...containerProps}\n      >\n        {components.map((component, index) => component\n          && React.cloneElement(component, { ...component.props, key: index }))}\n      </InputAddon>\n    )\n  }\n  render() {\n    const {\n      className,\n      innerRef,\n      rightComponents,\n      leftComponents,\n      children,\n      variant,\n      containerProps,\n    } = this.props\n\n    const InputComponent = React.Children.only(children)\n\n    const {\n      hasError,\n      readOnly,\n      disabled,\n    } = InputComponent.props\n\n    const rightAddon = this.getRightAddon([...rightComponents])\n    const leftAddon = this.getLeftAddon([...leftComponents])\n\n    return (\n      <InputWrapper\n        className={className}\n        classProps={{\n          hasError,\n          readOnly,\n          disabled,\n          variant,\n        }}\n        innerRef={innerRef}\n        {...containerProps}\n      >\n        {leftAddon}\n        {InputComponent}\n        {rightAddon}\n      </InputWrapper>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\nimport InputAddonWrapper from './InputAddonWrapper';\nimport { showEllipsis } from './showEllipsis';\n\nconst blockName = 'input';\nconst Input = aggregatedClasses('input')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst WrapperForTooltipInput = aggregatedClasses('div')(\n  blockName,\n  'tooltip-ref',\n);\nconst InputCustomWrapper = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst ClearableButton = aggregatedClasses(DSButton)(blockName, 'clearable');\n\nconst getValidComponents = component => component;\n\nconst noop = () => null;\nclass InputImpl extends Component {\n  static defaultProps = {\n    onBlur: noop,\n    onFocus: noop,\n  };\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.refTooltip = React.createRef();\n  }\n  state = {\n    width: -1,\n    active: false,\n    showTooltip: false,\n  };\n  componentDidMount() {\n    this.setWidth();\n    window.addEventListener('resize', this.setWidth);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setWidth);\n  }\n  handleBlur = e => {\n    const { onBlur } = this.props;\n    onBlur(e);\n    this.setState({\n      active: false,\n    });\n  };\n  handleFocus = e => {\n    const { onFocus } = this.props;\n    onFocus(e);\n    this.setState({\n      active: true,\n    });\n  };\n  handleMouseEnter = () => {\n    this.setState({\n      showTooltip: true,\n    });\n  };\n  handleMouseLeave = () => {\n    this.setState({\n      showTooltip: false,\n    });\n  };\n  setWidth = () => {\n    const client = this.refTooltip.current.getBoundingClientRect();\n    this.setState({\n      width: client.width,\n    });\n  };\n  handleClear() {\n    const { onClear, onChange, clearable } = this.props;\n    if (clearable && onClear) {\n      onClear();\n    } else {\n      onChange({ target: { value: '' } });\n    }\n\n    if ((this.ref || {}).current) this.ref.current.focus();\n  }\n  renderClearableComponent() {\n    const { clearable, value, disabled } = this.props;\n    if (disabled) return null;\n    return clearable && value ? (\n      <ClearableButton\n        buttonType=\"text\"\n        data-testid=\"ds-input_clearable-btn\"\n        disabled={disabled}\n        icon={<CloseCircle />}\n        onClick={this.handleClear}\n      />\n    ) : null;\n  }\n  render() {\n    const {\n      role,\n      id,\n      isShowElipsisActive,\n      autoFocus,\n      className,\n      name,\n      innerRef,\n      maxLength,\n      minLength,\n      placeholder,\n      leftComponent,\n      rightComponent,\n      disableTooltip,\n      readOnly,\n      disabled,\n      value,\n      onClick,\n      onChange,\n      onKeyDown,\n      onKeyUp,\n      onFocus,\n      onBlur,\n      onPaste,\n      required,\n      type,\n      customInputType,\n      min,\n      max,\n      clearable,\n      onMouseLeave,\n      onMouseOut,\n      style,\n      containerProps,\n      tabIndex,\n      ...rest\n    } = this.props;\n    const { width, active, showTooltip } = this.state;\n    const rightComponents = [\n      this.renderClearableComponent(),\n      rightComponent,\n    ].filter(getValidComponents);\n    const leftComponents = [leftComponent].filter(getValidComponents);\n\n    const inputProps = {\n      'aria-label': rest['aria-label'],\n      'aria-placeholder': placeholder,\n      'aria-required': required,\n      'aria-multiline': false,\n      'aria-autocomplete': 'none',\n      'data-testid': rest['data-testid'],\n      role,\n      id,\n      ref: this.ref,\n      className,\n      autoFocus,\n      disabled: disabled || readOnly,\n      innerRef,\n      maxLength,\n      minLength,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      onPaste,\n      onMouseLeave,\n      disableTooltip,\n      onMouseOut,\n      placeholder,\n      required,\n      type,\n      value,\n      min,\n      max,\n      style,\n      tabIndex,\n      ...containerProps,\n    };\n\n    let InputComponent = (\n      <WrapperForTooltipInput ref={this.refTooltip} style={{ width: '100%' }}>\n        {!customInputType ? (\n          <Input\n            {...inputProps}\n            autocomplete=\"off\"\n            clearable={clearable}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onMouseEnter={this.handleMouseEnter}\n            onMouseLeave={this.handleMouseLeave}\n            value={value}\n          />\n        ) : (\n          <InputCustomWrapper\n            {...containerProps}\n            clearable={clearable}\n            value={value}\n          >\n            {customInputType({\n              ...inputProps,\n            })}\n          </InputCustomWrapper>\n        )}\n      </WrapperForTooltipInput>\n    );\n    if (\n      showEllipsis(width, value) &&\n      !active &&\n      showTooltip &&\n      width &&\n      isShowElipsisActive\n    ) {\n      InputComponent = (\n        <DSTooltip\n          isOpen={disableTooltip}\n          title={String(value)}\n          zIndex={11}\n          triggerComponent={\n            <WrapperForTooltipInput style={{ width: '100%' }}>\n              {InputComponent}\n            </WrapperForTooltipInput>\n          }\n        />\n      );\n    }\n\n    const renderInput =\n      rightComponents.length || leftComponents.length || clearable ? (\n        <InputAddonWrapper\n          className={className}\n          leftComponents={leftComponents}\n          rightComponents={rightComponents}\n          {...containerProps}\n        >\n          {InputComponent}\n        </InputAddonWrapper>\n      ) : (\n        InputComponent\n      );\n\n    return renderInput;\n  }\n}\n\nInputImpl.propTypes = {\n  className: PropTypes.string,\n  customInputType: PropTypes.func,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isShowElipsisActive: PropTypes.bool,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onPaste: PropTypes.func,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  role: PropTypes.string,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Should be of type string if using ellipsis tooltip [isShowElipsisActive] prop\n   */\n  value(props, propName, componentName) {\n    // eslint-disable-line consistent-return\n    if (!!props.isShowElipsisActive && typeof props[propName] !== 'string') {\n      return new Error(\n        `Invalid prop \\`${propName}\\` of type \\`${typeof props[\n          propName\n        ]}\\` supplied to` +\n          ` \\`${componentName}\\`. Prop \\`value\\` should be of type \\`string\\` if prop \\`isShowElipsisActive\\` is set to \\`true\\`.` +\n          ' Either set `isShowElipsisActive` to `false`, or properly format your `value` prop to `string`.',\n      );\n    }\n  },\n};\n\nexport default InputImpl;\n","export function showEllipsis(width, value) {\n  return String(value).length * 8 > width\n}\n","import React from 'react'\nimport InputImpl from './InputImpl'\nimport InputAddonWrapper from './InputAddonWrapper'\n\nconst DSInput = ({\n  containerProps = {},\n  id,\n  autoFocus = false,\n  disabled = false,\n  className = '',\n  clearable = false,\n  name = '',\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  disableTooltip = true,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  customInputType = null,\n  variant,\n  isShowElipsisActive = true,\n  ...otherProps\n}) => {\n  return (\n    <InputImpl\n      {...otherProps}\n      aria-label={otherProps['aria-label']}\n      autoFocus={autoFocus}\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      customInputType={customInputType}\n      data-testid={otherProps['data-testid'] || 'ds-input_main-component'}\n      disabled={disabled}\n      disableTooltip={disableTooltip}\n      fluidWidth={fluidWidth}\n      hasError={hasError}\n      id={id}\n      innerRef={innerRef}\n      isShowElipsisActive={isShowElipsisActive}\n      leftComponent={leftComponent}\n      max={max}\n      maxLength={maxLength}\n      min={min}\n      minLength={minLength}\n      name={name}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rightComponent={rightComponent}\n      type={type}\n      value={value}\n      variant={variant}\n    />\n  )\n}\n\nexport { InputAddonWrapper }\n\nexport default DSInput\n","/* eslint-disable */\nimport createIcon from './utils/createIcon'\n\nexport default createIcon({\n  paths: ['M15 10.5c0 3.038-2.462 5.5-5.5 5.5S4 13.538 4 10.5 6.462 5 9.5 5 15 7.462 15 10.5zm-2.672-2.121l-.707-.707L9.5 9.793 7.379 7.672l-.707.707L8.793 10.5l-2.121 2.121.707.707L9.5 11.207l2.121 2.121.707-.707-2.121-2.121 2.121-2.121z',],\n  height: 20,\n  width: 20,\n})\n","import React, {\n  createContext, useEffect, useMemo, useRef,\n} from 'react'\nimport { isFunction, runAll, get } from '@elliemae/ds-utilities/utils'\nimport useHotkeys from '@elliemae/ds-utilities/hooks/useHotkeys'\nimport { mergeRefs } from '@elliemae/ds-utilities/system'\nimport getNextCellPosition from './utils/getNextCellPosition'\n\nexport const FocusGridContext = createContext()\nconst { Provider } = FocusGridContext\n\nconst preventDefault = e => e.preventDefault()\n\nfunction registerHotKeysHooks(hotKeys, { focusedRow, focusedCell }) {\n  Object.keys(hotKeys).forEach((key) => {\n    const { handler, options } = hotKeys[key]\n    useHotkeys({\n      keys: key,\n      handler: (e) => {\n        e.preventDefault()\n        handler({\n          rowIndex: focusedRow.current,\n          cellIndex: focusedCell.current,\n        })\n      },\n      options,\n    })\n  })\n}\n\n// eslint-disable-next-line max-statements\nexport default function FocusGridProvider({\n  shouldWrapRows = false,\n  shouldWrapCells = false,\n  shouldRefocus = true,\n  children,\n  keyBindings,\n  hotKeys,\n}) {\n  const focusedRow = useRef()\n  const focusedCell = useRef()\n  const grid = useRef([])\n  const containerRef = useRef(document)\n  const child = React.Children.only(children)\n  const decoratedChild = React.cloneElement(child, { innerRef: mergeRefs(child.props.innerRef, containerRef) })\n\n  const getNode = ({ rowIndex, cellIndex }) => get(grid.current, [rowIndex, cellIndex])\n\n  const register = (node, rowIndex, columnIndex) => {\n    if (!node) return\n    if (!Array.isArray(grid.current[rowIndex])) {\n      grid.current[rowIndex] = []\n    }\n\n    if (rowIndex === 0 && columnIndex === 0) {\n      node.setAttribute('tabindex', 0)\n    } else {\n      node.setAttribute('tabindex', -1)\n    }\n\n    node.onfocus = () => {\n      const prevNode = getNode({\n        rowIndex: focusedRow.current,\n        cellIndex: focusedCell.current,\n      })\n\n      if (prevNode) prevNode.setAttribute('tabindex', -1)\n\n      node.setAttribute('tabindex', 0)\n      focusedRow.current = rowIndex\n      focusedCell.current = columnIndex\n    }\n    grid.current[rowIndex][columnIndex] = node\n  }\n\n  useEffect(() => {\n    if (shouldRefocus) {\n      const rowIndex = focusedRow.current\n      const cellIndex = focusedCell.current\n\n      const node = get(grid.current, [rowIndex, cellIndex])\n      if (node) node.focus()\n    }\n  })\n\n\n  const focusNextCell = (directionY, directionX, position) => {\n    const { rowIndex, cellIndex } = position || getNextCellPosition({\n      grid: grid.current,\n      currentCell: focusedCell.current,\n      currentRow: focusedRow.current,\n      directionX,\n      directionY,\n      shouldWrapCells,\n      shouldWrapRows,\n    })\n\n    const node = getNode({ rowIndex, cellIndex })\n\n    // can focus\n    if (node) {\n      node.focus()\n      focusedRow.current = rowIndex\n      focusedCell.current = cellIndex\n    }\n  }\n\n  registerHotKeysHooks(hotKeys, { focusedCell, focusedRow })\n\n  const defaultKeyBindings = {\n    ArrowUp: runAll(preventDefault, () => focusNextCell(-1, 0)),\n    ArrowRight: runAll(preventDefault, () => focusNextCell(0, 1)),\n    ArrowDown: runAll(preventDefault, () => focusNextCell(1, 0)),\n    ArrowLeft: runAll(preventDefault, () => focusNextCell(0, -1)),\n    Home: runAll(preventDefault,\n      (e) => {\n        let rowIndex = focusedRow.current\n        if (e.ctrlKey) {\n          rowIndex = 0\n        }\n        focusNextCell(\n          0,\n          0,\n          { rowIndex, cellIndex: 0 })\n      },\n    ),\n    End: runAll(preventDefault,\n      (e) => {\n        let rowIndex = focusedRow.current\n        if (e.ctrlKey) {\n          rowIndex = grid.current.length - 1\n        }\n        focusNextCell(\n          0,\n          0,\n          { rowIndex, cellIndex: grid.current[0].length - 1 })\n      },\n    ),\n    ...keyBindings,\n  }\n  const nextKeyBindings = isFunction(keyBindings)\n    ? keyBindings({\n      defaultBindings: defaultKeyBindings,\n      rowIndex: focusedRow.current,\n      cellIndex: focusedCell.current,\n    })\n    : { ...defaultKeyBindings, ...keyBindings }\n\n\n  const onKeyDown = (e) => {\n    if (e.target.tagName.toLowerCase() === 'input') return\n    const action = nextKeyBindings[e.key]\n    if (isFunction(action)) action(e)\n  }\n\n  const activate = (container) => {\n    container.addEventListener('keydown', onKeyDown, true)\n  }\n\n  const deactivate = (container) => {\n    container.removeEventListener('keydown', onKeyDown, true)\n  }\n\n  useEffect(() => {\n    activate(containerRef.current)\n    return () => {\n      deactivate(containerRef.current)\n    }\n  }, [])\n\n\n  const valueProvider = useMemo(() => ({\n    register,\n  }), [])\n\n  return (\n    <Provider value={valueProvider}>\n      {decoratedChild}\n    </Provider>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DSInput from '@elliemae/ds-basic/form/Input'\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => {\n  return (\n    <DSInput\n      {...otherProps}\n      aria-label={otherProps['aria-label'] || 'Text Box'}\n      autoFocus={autoFocus}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      fluidWidth={fluidWidth}\n      hasError={hasError}\n      innerRef={innerRef}\n      leftComponent={leftComponent}\n      max={max}\n      maxLength={maxLength}\n      min={min}\n      minLength={minLength}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      required={required}\n      rightComponent={rightComponent}\n      role='textbox'\n      type={type}\n      value={value}\n      variant={variant}\n    />\n  )\n}\n\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n}\n\nexport default DSTextBox\n","/* eslint-disable no-loops/no-loops, no-cond-assign */\nexport const objectType = (obj) => {\n  return Object.prototype.toString.call(obj).slice(8, -1)\n}\nexport const isDefined = (param) => {\n  return typeof param !== 'undefined'\n}\nexport const isUndefined = (param) => {\n  return typeof param === 'undefined'\n}\nexport const isFunction = (param) => {\n  return typeof param === 'function'\n}\nexport const isNumber = (param) => {\n  return typeof param === 'number' && !isNaN(param) // eslint-disable-line\n}\nexport const isString = (str) => {\n  return objectType(str) === 'String'\n}\nexport const isArray = (arr) => {\n  return objectType(arr) === 'Array'\n}\n\nexport const closest = (target, selector) => {\n  // closest(e.target, '.field')\n  while (target) { // eslint-disable-line\n    if (target.matches && target.matches(selector)) return target\n    if (target.msMatchesSelector && target.msMatchesSelector(selector)) return target\n    target = target.parentNode\n  }\n  return null\n}\n\nexport const getOffsetRect = (elem) => {\n  // (1)\n  const box = elem.getBoundingClientRect()\n\n  const { body, documentElement } = document\n\n  // (2)\n  const scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop\n  const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft\n\n  // (3)\n  const clientTop = documentElement.clientTop || body.clientTop || 0\n  const clientLeft = documentElement.clientLeft || body.clientLeft || 0\n\n  // (4)\n  const top = box.top + scrollTop - clientTop\n  const left = box.left + scrollLeft - clientLeft\n\n  return { top: Math.round(top), left: Math.round(left) }\n}\n\nexport const getTotalScroll = (elem) => {\n  let top = 0\n  let left = 0\n\n  while ((elem = elem.parentNode)) {\n    top += elem.scrollTop || 0\n    left += elem.scrollLeft || 0\n  }\n\n  return { top, left }\n}\n\nexport const getTransformProps = (x, y) => {\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n  }\n}\n\nexport const listWithChildren = (list, childrenProp) => {\n  return list.map((item) => {\n    return {\n      ...item,\n      [childrenProp]: item[childrenProp]\n        ? listWithChildren(item[childrenProp], childrenProp)\n        : [],\n    }\n  })\n}\n\nexport const getAllNonEmptyNodesIds = (items, childrenProp) => {\n  let childrenIds = []\n  const ids = items\n    .filter(item => item[childrenProp].length)\n    .map((item) => {\n      childrenIds = childrenIds.concat(getAllNonEmptyNodesIds(item[childrenProp], childrenProp))\n      return item.id\n    })\n\n  return ids.concat(childrenIds)\n}\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { aggregatedClasses, convertPropToCssClassName } from '@elliemae/ds-classnames'\nimport DSPopper, { PopperPositions, PopperInteractions } from '@elliemae/ds-basic/Popper'\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps'\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants'\nimport { TooltipType } from './TooltipType'\nimport { interactions } from '../Popper/interaction'\nimport { positions } from '../Popper/positions'\n\n\nconst blockName = 'tooltip'\n\nconst TooltipContainer = aggregatedClasses('div')(blockName)\nconst TooltipText = aggregatedClasses('span')(blockName, 'text')\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(blockName)\n\n  let Content = title\n  if (typeof title === 'string') {\n    Content = (\n      <TooltipText>\n        {title}\n      </TooltipText>\n    )\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={(\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      )}\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  )\n}\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.string,\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n}\n\nexport { TooltipType }\nexport default DSTooltip\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport FocusGroupManager from './FocusGroupManager'\n\nexport default function FocusGroupHoc(WrappedComponent, options = {}) {\n  return ({\n    onExitFocusGroup, onFocusPrevGroup, focusKeyBindings, ...props\n  }) => (\n    <FocusGroupManager\n      keyBindings={focusKeyBindings}\n      onExitFocusGroup={onExitFocusGroup}\n      onFocusPrevGroup={onFocusPrevGroup}\n      {...options}\n    >\n      <WrappedComponent {...props} {...options} />\n    </FocusGroupManager>\n  )\n}\n","export const DEFAULT_DELAY_OPEN = 200\nexport const DEFAULT_DELAY_CLOSE = 300\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large']\n","// eslint-disable-next-line max-statements\nexport default function getNextCellPosition({\n  grid,\n  currentRow = 0,\n  currentCell = 0,\n  directionY,\n  directionX,\n  shouldWrapCells,\n  shouldWrapRows,\n}) {\n  let nextRow = currentRow + directionY\n  let nextCell = currentCell + directionX\n  const rowCount = grid.length\n  const isLeftRight = directionX !== 0\n\n  if (!rowCount) {\n    return false\n  }\n\n  const cellsLength = grid[0].length\n\n  // moving horizontally\n  if (shouldWrapCells && isLeftRight) {\n    // to left\n    if (nextCell < 0) {\n      nextCell = cellsLength - 1\n      nextRow -= 1\n    }\n\n    if (nextCell >= cellsLength) {\n      nextCell = 0\n      nextRow += 1\n    }\n  }\n\n  // moving vertically\n  if (shouldWrapRows && !isLeftRight) {\n    // to top\n    if (nextRow < 0) {\n      nextCell -= 1\n      nextRow = rowCount - 1\n      if (grid[nextRow] && nextCell >= 0 && !grid[nextRow][nextCell]) {\n        nextRow -= 1\n      }\n    } else if (nextRow >= rowCount || !grid[nextRow][nextCell]) {\n      nextRow = 0\n      nextCell += 1\n    }\n  }\n\n  return {\n    cellIndex: nextCell,\n    rowIndex: nextRow,\n  }\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = require('react');\nvar React__default = _interopDefault(React);\nvar hotkeys = _interopDefault(require('hotkeys-js'));\n\nfunction useHotkeys(_ref) {\n  var keys = _ref.keys,\n      handler = _ref.handler,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var memoizedCallback = React.useCallback(handler, deps);\n  React.useEffect(function () {\n    hotkeys(keys, options, memoizedCallback);\n    return function () {\n      return hotkeys.unbind(keys);\n    };\n  }, [memoizedCallback]);\n}\n\nmodule.exports = useHotkeys;\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = WrappedComponent =>\n  class extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n    static defaultProps = {\n      onSearch: () => null,\n      onKeyUp: () => null,\n      property: 'all',\n      searchOnEnter: true,\n      clearOnSearch: false,\n      containerProps: {},\n    };\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n        prevPropValue: '',\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      // if (this.buttonRef.current) this.buttonRef.current.focus()\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter } = this.props;\n\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  };\n\nexport default withSearchable;\n","import React, { Component } from 'react'\nimport { debounce } from '@elliemae/ds-utilities/utils'\nimport SearchIcon from '@elliemae/ds-icons/Search'\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport DSExpandableInput from '@elliemae/ds-basic/form/ExpandableInput'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport withSearchable from './withSearchable'\n\nconst blockName = 'searchbox-toggle'\nconst SearchBoxContainer = aggregatedClasses('div')(blockName)\n\nclass SearchBoxToggle extends Component {\n  hideInput = debounce(this.handleHideInput, 100)\n  showInput = debounce(this.handleShowInput, 100)\n  constructor(props) {\n    super(props)\n    this.state = {\n      isOpen: false,\n    }\n\n    this.hideInput = this.hideInput.bind(this)\n    this.showInput = this.showInput.bind(this)\n    this.handleHideInput = this.handleHideInput.bind(this)\n    this.handleShowInput = this.handleShowInput.bind(this)\n  }\n  componentDidUpdate(prevProps) {\n    const { clearOnSearch, value } = this.props\n    const { value: prevValue } = prevProps\n    if (clearOnSearch && value !== prevValue && !value && prevValue && prevValue.length !== 1) {\n      this.handleHideInput(false)\n    }\n  }\n  handleSearch() {\n    const { onSearch, clearOnSearch } = this.props\n    onSearch()\n    if (clearOnSearch) this.setState({ isOpen: false })\n  }\n  handleHideInput(executeIfValue = true) {\n    const { value } = this.props\n    if (value) {\n      if (executeIfValue) this.handleSearch()\n    } else {\n      this.setState({ isOpen: false })\n    }\n  }\n  handleBlur(e) {\n    if (this.expandableEl.contains(e.target)) return\n    this.hideInput(false)\n  }\n  handleShowInput() {\n    this.setState({ isOpen: true })\n  }\n  render() {\n    const {\n      onChange,\n      onKeyUp,\n      value,\n      placeholder,\n      clearable,\n      className,\n      buttonRef,\n      containerProps,\n      width = 300,\n    } = this.props\n    const { isOpen } = this.state\n    return (\n      <SearchBoxContainer>\n        <DSExpandableInput\n          containerProps={containerProps}\n          innerRef={node => (this.expandableEl = node)}\n          isOpen={isOpen}\n          onBlur={this.handleBlur}\n          onClose={this.hideInput}\n          onOpen={this.showInput}\n          triggerComponent={<DSButton key='handler' buttonType='text' icon={<SearchIcon />} innerRef={buttonRef} />}\n          width={width}\n        >\n          <DSTextBox\n            className={`expandable-input__input ${className}`}\n            clearable={clearable}\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            placeholder={placeholder}\n            showIcon={false}\n            value={value}\n          />\n        </DSExpandableInput>\n      </SearchBoxContainer>\n    )\n  }\n}\n\nexport default withSearchable(SearchBoxToggle)\n","/* eslint-disable react/no-unused-state */\nimport React from 'react'\nimport Search from '@elliemae/ds-icons/Search'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox'\nimport withSearchable from './withSearchable'\n\nfunction SearchBoxImpl({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  readOnly,\n  value,\n  clearable,\n}) {\n  return (\n    <DSTextBox\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      innerRef={innerRef}\n      onChange={onChange}\n      onKeyUp={onKeyUp}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      rightComponent={showIcon && (\n        <DSButton\n          buttonType='text'\n          icon={<Search />}\n          iconSize='s'\n          onClick={onSearch}\n        />\n      )}\n      style={style}\n      value={value}\n    />\n  )\n}\n\nexport default withSearchable(SearchBoxImpl)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n  toggleSearchInput = false,\n}) => {\n  return (\n    <SearchBoxImpl\n      className={className}\n      clearOnSearch={clearOnSearch}\n      containerProps={containerProps}\n      disabled={disabled}\n      innerRef={innerRef}\n      onKeyUp={onKeyUp}\n      onSearch={onSearch}\n      placeholder={placeholder}\n      property={property}\n      readOnly={readOnly}\n      searchIcon={searchIcon}\n      searchOnEnter={searchOnEnter}\n      showIcon={showIcon}\n      style={style}\n      toggleSearchInput={toggleSearchInput}\n      value={value}\n    />\n  );\n};\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.instanceOf(Element),\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Whether to toggle the search input or not\n   */\n  toggleSearchInput: PropTypes.bool,\n  /**\n   * Disables the search input\n   */\n  disabled: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","/* eslint-disable */\nimport createIcon from './utils/createIcon'\n\nexport default createIcon({\n  paths: ['M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',],\n  height: 20,\n  width: 20,\n})\n","import React, { Component, cloneElement } from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport { isFunction } from '@elliemae/ds-shared/utils'\nimport { InputAddonWrapper } from '@elliemae/ds-basic/form/Input'\n\nconst blockName = 'expandable-input'\n\nconst ExpandableInput = aggregatedClasses('div')(blockName, null, ({ isOpen }) => ({ opened: isOpen }))\nconst InputWrapper = aggregatedClasses(InputAddonWrapper)(blockName, 'wrapper', ({ isOpen }) => ({ opened: isOpen }))\n\nexport default class ExpandableInputImpl extends Component {\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props\n    if (isOpen && isOpen !== prevProps.isOpen) this.input.focus()\n  }\n  render() {\n    const {\n      innerRef,\n      triggerComponent,\n      children,\n      width,\n      isOpen,\n      onOpen,\n      onClose,\n      onBlur,\n      containerProps,\n    } = this.props\n    const InputComponent = React.Children.only(children)\n    const handleTriggerClick = (e) => {\n      if (isFunction(triggerComponent.onClick)) triggerComponent.onClick(e)\n      if (isOpen) {\n        onClose()\n      } else {\n        onOpen()\n      }\n    }\n\n    return (\n      <ExpandableInput\n        {...containerProps}\n        classProps={{ isOpen }}\n        innerRef={innerRef}\n        style={{ width: isOpen && width }}\n      >\n        <InputWrapper\n          rightComponents={[\n            cloneElement(triggerComponent, {\n              key: 'handler',\n              onClick: handleTriggerClick,\n            }),\n          ]}\n        >\n          {cloneElement(InputComponent, {\n            className: 'expandable-input__input',\n            innerRef: node => this.input = node,\n            onBlur,\n          })}\n        </InputWrapper>\n      </ExpandableInput>\n    )\n  }\n}\n","import React from 'react'\nimport ExpandableInputImpl from './ExpandableInputImpl'\n\nconst DSExpandableInput = ({\n  containerProps = {},\n  innerRef,\n  className = '',\n  style = {},\n  triggerComponent = undefined,\n  children,\n  isOpen = false,\n  onOpen = () => null,\n  onClose = () => null,\n  onBlur = () => null,\n  width = undefined,\n}) => {\n  return (\n    <ExpandableInputImpl\n      className={className}\n      containerProps={containerProps}\n      innerRef={innerRef}\n      isOpen={isOpen}\n      onBlur={onBlur}\n      onClose={onClose}\n      onOpen={onOpen}\n      style={style}\n      triggerComponent={triggerComponent}\n      width={width}\n    >\n      {children}\n    </ExpandableInputImpl>\n  )\n}\n\nexport default DSExpandableInput\n"],"sourceRoot":""}