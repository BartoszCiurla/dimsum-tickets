{"version":3,"sources":["DataGrid/editableColumns.js","../../../../../src/form/TextBox/DSTextBox.js"],"names":["options","value","label","property","editable","sortable","resizable","customEditor","onValue","rowData","autoFocus","menuIsOpen","onBlur","onChange","val","searchable","DSTextBox","containerProps","disabled","maxLength","minLength","fluidWidth","placeholder","hasError","readOnly","innerRef","type","min","max","clearable","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","PropTypes","string"],"mappings":"iGAAA,oCAGMA,EAAU,CACd,CAAEC,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,cAAeC,MAAO,eAC/B,CAAED,MAAO,OAAQC,MAAO,SA6BX,WACb,CACEC,SAAU,OACVD,MAAO,OACPE,UAAU,EACVC,UAAU,EACVC,WAAW,GAEb,CACEH,SAAU,QACVD,MAAO,QACPE,UAAU,EACVE,WAAW,EACXD,UAAU,EACVE,aAxCkB,SAAC,GAAiC,IAA/BN,EAA8B,EAA9BA,MAAOO,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QACvC,OACE,kBAAC,IAAD,CACEC,WAAS,EACTC,YAAU,EACVC,OAAQ,kBAAMJ,EAAkB,QAAVP,IACtBY,SAAU,SAACC,GAAD,OAASN,EAAQM,EAAKL,IAChCT,QAASA,EACTC,MAAiB,QAAVA,MAkCX,CACEE,SAAU,SACVD,MAAO,SACPE,UAAU,EACVW,YAAY,EACZV,UAAU,EACVC,WAAW,GAEb,CACEH,SAAU,UACVD,MAAO,UACPE,UAAU,EACVC,UAAU,EACVC,WAAW,GAEb,CACEH,SAAU,WACVD,MAAO,WACPE,UAAU,EACVE,WAAW,EACXC,aAjDqB,SAAC,GAAiC,IAA/BN,EAA8B,EAA9BA,MAAOO,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAC1C,OACE,kBAAC,IAAD,CACEC,WAAS,EACTC,YAAU,EACVC,OAAQ,kBAAMJ,EAAkB,QAAVP,IACtBY,SAAU,SAACC,GAAD,OAASN,EAAQM,EAAKL,IAChCT,QAASA,EACTC,MAAiB,QAAVA,Q,4FC1BPe,EAAY,SAAC,GAAD,uBAChBC,OADgB,yBAEhBP,OAFgB,sBAGhBQ,OAHgB,uBAIhBC,OAJgB,0BAKhBC,OALgB,yBAMhBC,OANgB,SAOhBC,EAPgB,wBAQhBrB,OARgB,wBAShBsB,OATgB,sBAUhBC,OAVgB,sBAWhBC,OAXgB,sBAYhBC,OAZgB,uBAahBC,OAbgB,uBAchBC,OAdgB,6BAehBC,OAfgB,2BAgBhBC,OAhBgB,gCAiBhBC,OAjBgB,0BAkBhBC,OAlBgB,SAmBhBC,EAnBgB,UAoBbC,EApBa,iPAsBhB,wCAEEC,aAAYD,iBAFd,WAGExB,UAHF,EAIEmB,UAJF,EAKEZ,eALF,EAMEC,SANF,EAOEG,WAPF,EAQEE,SARF,EASEE,SATF,EAUEK,cAVF,EAWEF,IAXF,EAYET,UAZF,EAaEQ,IAbF,EAcEP,UAdF,EAeEE,YAfF,EAgBEE,SAhBF,EAiBEQ,SAjBF,EAkBED,eAlBF,EAmBEK,KAnBF,UAoBEV,KApBF,EAqBEzB,MArBF,EAsBEgC,QAASA,MAIbjB,YAAsB,CACpBC,eAAgBoB,UADI,IAKpB3B,UAAW2B,IALS,KASpBnB,SAAUmB,IATU,KAapBlB,UAAWkB,IAbS,OAiBpBjB,UAAWiB,IAjBS,OAqBpBhB,WAAYgB,IArBQ,KAyBpBf,YAAae,IAzBO,OA6BpBpC,MAAOoC,IA7Ba,OAiCpBd,SAAUc,IAjCU,KAqCpBb,SAAUa,IArCU,KAsCpBV,IAAKU,IAtCe,OAuCpBT,IAAKS,IAvCe,OA2CpBR,UAAWQ,IA3CS,KA+CpBP,cAAeO,IA/CK,QAmDpBN,eAAgBM,IAnDI,QAuDpBL,SAAUK,IAvDU,KAgEpBJ,QAASI,IAAUC,Q","file":"static/js/48.0bf44bdc.chunk.js","sourcesContent":["import React from 'react';\nimport DSComboBox from '@elliemae/ds-basic/dscombobox';\n\nconst options = [\n  { value: 'Borrower', label: 'Borrower' },\n  { value: 'Co-Borrower', label: 'Co-Borrower' },\n  { value: 'Both', label: 'Both' },\n];\n\nconst OwnerComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === 'Yes')}\n      onChange={(val) => onValue(val, rowData)}\n      options={options}\n      value={value === 'Yes'}\n    />\n  );\n};\n\nconst OverTimeComboBox = ({ value, onValue, rowData }) => {\n  return (\n    <DSComboBox\n      autoFocus\n      menuIsOpen\n      onBlur={() => onValue(value === 'Yes')}\n      onChange={(val) => onValue(val, rowData)}\n      options={options}\n      value={value === 'Yes'}\n    />\n  );\n};\n\nexport default [\n  {\n    property: 'name',\n    label: 'Name',\n    editable: true,\n    sortable: true,\n    resizable: true,\n  },\n  {\n    property: 'owner',\n    label: 'Owner',\n    editable: true,\n    resizable: true,\n    sortable: true,\n    customEditor: OwnerComboBox,\n  },\n  {\n    property: 'salary',\n    label: 'Salary',\n    editable: true,\n    searchable: true,\n    sortable: true,\n    resizable: true,\n  },\n  {\n    property: 'monthly',\n    label: 'Monthly',\n    editable: true,\n    sortable: true,\n    resizable: true,\n  },\n  {\n    property: 'overtime',\n    label: 'Overtime',\n    editable: true,\n    resizable: true,\n    customEditor: OverTimeComboBox,\n  },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n"],"sourceRoot":""}