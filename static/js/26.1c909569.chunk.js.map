{"version":3,"sources":["../../../src/form/LargeInputText/DSLargeInputText.js","FormItemLayout/LargeInputText.js","../../../../../../src/form/InputMask/addons/NumberMask.js","../../../../../../src/form/InputMask/addons/PercentMask.js","../../../../../src/form/TextBox/DSTextBox.js","../../../../../src/form/InputMask/MaskTypes.js"],"names":["CounterArea","aggregatedClasses","DSLargeInputText","containerProps","autoFocus","className","disabled","name","id","maxLength","minLength","placeholder","onClick","onChange","onFocus","onBlur","onKeyUp","onKeyDown","onPaste","value","hasError","required","readOnly","resize","innerRef","ariaLabel","ariaAutocomplete","role","characterLimitCounter","rows","errorLimit","tabIndex","limitError","useMemo","String","convertPropToCssClassName","cssClassName","classNameElement","classNameBlock","ref","aria-autocomplete","aria-label","aria-multiline","aria-placeholder","aria-required","data-testid","e","style","classProps","PropTypes","string","useState","setValue","handleChange","target","height","DSFormItemLayout","feedbackMessage","inputComponent","labelText","minusRegExp","nonDigitsRegExp","digitRegExp","convertToMask","strNumber","char","addThousandsSeparator","n","thousandsSeparatorSymbol","prefix","suffix","includeThousandsSeparator","allowDecimal","decimalSymbol","decimalLimit","requireDecimal","allowNegative","allowLeadingZeroes","integerLimit","prefixLength","suffixLength","thousandsSeparatorSymbolLength","rawValue","rawValueLength","Number","parseInt","isNegative","indexOfLastDecimal","hasDecimal","integer","fraction","thousandsSeparatorRegex","numberOfThousandSeparators","RegExp","mask","concat","numberMask","DSTextBox","fluidWidth","type","min","max","clearable","leftComponent","rightComponent","variant","otherProps","MASK_TYPES","DATE","DATE_TIME","PHONE","PHONE_INTENATIONAL","SSN","US_ZIP_CODE","NUMBER","PERCENT","createPercentMask","maskTypes"],"mappings":"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","file":"static/js/26.1c909569.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-autofocus, react/prop-types */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  convertPropToCssClassName,\n  aggregatedClasses,\n} from '@elliemae/ds-classnames';\n\nconst CounterArea = aggregatedClasses('div')(\n  'counter',\n  'textarea',\n  ({ limitError }) => ({\n    'limit-error': limitError,\n  }),\n);\n\nconst DSLargeInputText = ({\n  containerProps = {},\n  autoFocus = false,\n  className = '',\n  disabled = false,\n  name = '',\n  id = null,\n  maxLength = null,\n  minLength = 0,\n  placeholder = '',\n  onClick = () => null,\n  onChange = () => null,\n  onFocus = () => null,\n  onBlur = () => null,\n  onKeyUp = () => null,\n  onKeyDown = () => null,\n  onPaste = () => null,\n  value = '',\n  hasError = false,\n  required = false,\n  readOnly = false,\n  resize = 'vertical',\n  innerRef = null,\n  ariaLabel = 'Enter text',\n  ariaAutocomplete = 'none',\n  role = 'textbox',\n  characterLimitCounter = 0,\n  rows = 3,\n  errorLimit = 'Please limit your entry to',\n  tabIndex = '',\n}) => {\n  const limitError = useMemo(\n    () =>\n      characterLimitCounter < String(value).length && characterLimitCounter > 0,\n    [characterLimitCounter, value],\n  );\n  const {\n    cssClassName,\n    classNameElement,\n    classNameBlock,\n  } = convertPropToCssClassName('form-element-textarea', 'text', {\n    hasError: limitError || hasError,\n    readOnly,\n    disabled,\n  });\n  // auto size when user types\n  const handleKeyUp = (e) => {\n    // const { target } = e\n    onKeyUp(e);\n    // if (e.key !== 'Enter') return\n    // target.style.cssText = 'height:auto; padding:0'\n    // target.style.cssText = `height: ${target.scrollHeight}px`\n  };\n  return (\n    <>\n      <div {...containerProps} className={`${cssClassName} ${className}`}>\n        <div className={classNameBlock('wrapper')}>\n          <textarea\n            ref={innerRef}\n            aria-autocomplete={ariaAutocomplete}\n            aria-label={ariaLabel}\n            aria-multiline\n            aria-placeholder={placeholder}\n            aria-required={required}\n            autoFocus={autoFocus}\n            className={classNameElement('textarea')}\n            data-testid=\"ds-large-input_main-component\"\n            disabled={disabled}\n            id={id}\n            maxLength={maxLength}\n            minLength={minLength}\n            name={name}\n            onBlur={onBlur}\n            onChange={onChange}\n            onClick={onClick}\n            onFocus={onFocus}\n            onKeyDown={onKeyDown}\n            onKeyUp={handleKeyUp}\n            onPaste={onPaste}\n            placeholder={placeholder}\n            role={role}\n            rows={String(rows)}\n            style={{\n              resize,\n            }}\n            value={value}\n            tabIndex={tabIndex}\n          />\n        </div>\n      </div>\n      {characterLimitCounter > 0 && (\n        <CounterArea classProps={{ limitError }} data-testid=\"counter-area\">\n          {`${\n            limitError\n              ? `${errorLimit} ${characterLimitCounter} characters.   `\n              : ''\n          }${String(value).length} / ${characterLimitCounter}`}\n        </CounterArea>\n      )}\n    </>\n  );\n};\n\nDSLargeInputText.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  className: PropTypes.string,\n  /**\n   * Whether is disabled or not\n   */\n  disabled: PropTypes.bool,\n  name: PropTypes.string,\n  id: PropTypes.number,\n  /**\n   * Max length for text to be entered\n   */\n  // eslint-disable-next-line max-lines\n  maxLength: PropTypes.number,\n  /**\n   * Min length for text to be entered\n   */\n  minLength: PropTypes.number,\n  /**\n   * Placeholder for the text\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Allows a function that is triggered once the input text is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text is focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text loses focus\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Allows a function that is triggered once in the input a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once a key is being pressed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the input text is pasted\n   */\n  onPaste: PropTypes.func,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the input text has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the input text is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * Whether the input text is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the input text style is vertical or not\n   */\n  resize: PropTypes.string,\n  innerRef: PropTypes.func,\n  ariaLabel: PropTypes.string,\n  ariaAutocomplete: PropTypes.string,\n  /**\n   * Type of input. Ex: textbox\n   */\n  role: PropTypes.string,\n  /**\n   * it will show a counter/limit if the value is greater than 0\n   */\n  characterLimitCounter: PropTypes.number,\n  /**\n   * Tab index html property.\n   */\n  tabIndex: PropTypes.string,\n};\n\nexport default DSLargeInputText;\n","import React, { useState } from \"react\";\nimport DSLargeInputText from \"@elliemae/ds-basic/dslargeinputtext\";\nimport DSFormItemLayout from \"@elliemae/ds-basic/form/FormItem\";\n\nexport default () => {\n  const [value, setValue] = useState();\n  const handleChange = ({ target: { value } }) => setValue(value);\n  return (\n    <div>\n      <DSLargeInputText\n        characterLimitCounter={20}\n        containerProps={{ id: \"my-custom-id\" }}\n        maxLength={500}\n        onChange={handleChange}\n        rows={6}\n        value={value}\n      />\n      <div style={{ height: \"2rem\" }} />\n      <DSFormItemLayout\n        containerProps={{ id: \"my-custom-id\" }}\n        feedbackMessage=\"Some feedback from de user...\"\n        inputComponent={DSLargeInputText}\n        labelText=\"Label text\"\n        onChange={handleChange}\n        placeholder=\"Hint Text\"\n        value={value}\n      />\n    </div>\n  );\n};\n","const dollarSign = '$';\nconst emptyString = '';\nconst comma = ',';\nconst period = '.';\nconst minus = '-';\nconst minusRegExp = /-/;\nconst nonDigitsRegExp = /\\D+/g;\nconst number = 'number';\nconst digitRegExp = /\\d/;\nconst caretTrap = '[]';\n\nconst convertToMask = strNumber =>\n  strNumber\n    .split(emptyString)\n    .map(char => (digitRegExp.test(char) ? digitRegExp : char));\n\n// http://stackoverflow.com/a/10899795/604296\nconst addThousandsSeparator = (n, thousandsSeparatorSymbol) =>\n  n.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparatorSymbol);\n\nexport default function createNumberMask({\n  prefix = dollarSign,\n  suffix = emptyString,\n  includeThousandsSeparator = true,\n  thousandsSeparatorSymbol = comma,\n  allowDecimal = false,\n  decimalSymbol = period,\n  decimalLimit = 2,\n  requireDecimal = false,\n  allowNegative = false,\n  allowLeadingZeroes = false,\n  integerLimit = null,\n} = {}) {\n  const prefixLength = (prefix && prefix.length) || 0;\n  const suffixLength = (suffix && suffix.length) || 0;\n  const thousandsSeparatorSymbolLength =\n    (thousandsSeparatorSymbol && thousandsSeparatorSymbol.length) || 0;\n\n  // eslint-disable-next-line max-statements\n  function numberMask(rawValue = emptyString) {\n    const rawValueLength = rawValue.length;\n    if (\n      rawValueLength === 1 &&\n      !Number.isInteger(parseInt(rawValue[0], 10)) &&\n      allowNegative === false\n    ) {\n      return [''];\n    }\n    if (\n      rawValue === emptyString ||\n      (rawValue[0] === prefix[0] && rawValueLength === 1)\n    ) {\n      return prefix\n        .split(emptyString)\n        .concat([digitRegExp])\n        .concat(suffix.split(emptyString));\n    }\n    if (rawValue === decimalSymbol && allowDecimal) {\n      return prefix\n        .split(emptyString)\n        .concat(['0', decimalSymbol, digitRegExp])\n        .concat(suffix.split(emptyString));\n    }\n\n    const isNegative = rawValue[0] === minus && allowNegative;\n    // If negative remove \"-\" sign\n    if (isNegative) {\n      rawValue = rawValue.toString().substr(1);\n    }\n\n    const indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol);\n    const hasDecimal = indexOfLastDecimal !== -1;\n\n    let integer;\n    let fraction;\n    let mask;\n\n    // remove the suffix\n    if (rawValue.slice(suffixLength * -1) === suffix) {\n      rawValue = rawValue.slice(0, suffixLength * -1);\n    }\n\n    if (hasDecimal && (allowDecimal || requireDecimal)) {\n      integer = rawValue.slice(\n        rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0,\n        indexOfLastDecimal,\n      );\n\n      fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength);\n      fraction = convertToMask(fraction.replace(nonDigitsRegExp, emptyString));\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (rawValue.slice(0, prefixLength) === prefix) {\n        integer = rawValue.slice(prefixLength);\n      } else {\n        integer = rawValue;\n      }\n    }\n\n    // eslint-disable-next-line valid-typeof\n    if (integerLimit && typeof integerLimit === number) {\n      const thousandsSeparatorRegex =\n        thousandsSeparatorSymbol === '.'\n          ? '[.]'\n          : `${thousandsSeparatorSymbol}`;\n      const numberOfThousandSeparators = (\n        integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []\n      ).length;\n\n      integer = integer.slice(\n        0,\n        integerLimit +\n          numberOfThousandSeparators * thousandsSeparatorSymbolLength,\n      );\n    }\n\n    integer = integer.replace(nonDigitsRegExp, emptyString);\n\n    if (!allowLeadingZeroes) {\n      integer = integer.replace(/^0+(0$|[^0])/, '$1');\n    }\n\n    integer = includeThousandsSeparator\n      ? addThousandsSeparator(integer, thousandsSeparatorSymbol)\n      : integer;\n\n    mask = convertToMask(integer);\n\n    if ((hasDecimal && allowDecimal) || requireDecimal === true) {\n      if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {\n        mask.push(caretTrap);\n      }\n\n      mask.push(decimalSymbol, caretTrap);\n\n      if (fraction) {\n        // eslint-disable-next-line valid-typeof\n        if (typeof decimalLimit === number) {\n          fraction = fraction.slice(0, decimalLimit);\n        }\n\n        mask = mask.concat(fraction);\n      }\n\n      if (\n        requireDecimal === true &&\n        rawValue[indexOfLastDecimal - 1] === decimalSymbol\n      ) {\n        mask.push(digitRegExp);\n      }\n    }\n\n    if (prefixLength > 0) {\n      mask = prefix.split(emptyString).concat(mask);\n    }\n\n    if (isNegative) {\n      // If user is entering a negative number, add a mask placeholder spot to attract the caret to it.\n      if (mask.length === prefixLength) {\n        mask.push(digitRegExp);\n      }\n\n      mask = [minusRegExp].concat(mask);\n    }\n\n    if (suffix.length > 0) {\n      mask = mask.concat(suffix.split(emptyString));\n    }\n\n    return mask;\n  }\n\n  numberMask.instanceOf = 'createNumberMask';\n\n  return numberMask;\n}\n","const percentSign = '%';\nconst emptyString = '';\nconst comma = ',';\nconst period = '.';\nconst minus = '-';\nconst minusRegExp = /-/;\nconst nonDigitsRegExp = /\\D+/g;\nconst number = 'number';\nconst digitRegExp = /\\d/;\nconst caretTrap = '[]';\n\nconst convertToMask = strNumber =>\n  strNumber\n    .split(emptyString)\n    .map(char => (digitRegExp.test(char) ? digitRegExp : char));\n\n// http://stackoverflow.com/a/10899795/604296\nconst addThousandsSeparator = (n, thousandsSeparatorSymbol) =>\n  n.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparatorSymbol);\n\nexport default function createPercentMask({\n  prefix = emptyString,\n  suffix = percentSign,\n  includeThousandsSeparator = true,\n  thousandsSeparatorSymbol = comma,\n  allowDecimal = false,\n  decimalSymbol = period,\n  decimalLimit = 2,\n  requireDecimal = false,\n  allowNegative = false,\n  allowLeadingZeroes = false,\n  integerLimit = null,\n} = {}) {\n  const prefixLength = (prefix && prefix.length) || 0;\n  const suffixLength = (suffix && suffix.length) || 0;\n  const thousandsSeparatorSymbolLength =\n    (thousandsSeparatorSymbol && thousandsSeparatorSymbol.length) || 0;\n\n  // eslint-disable-next-line max-statements\n  function numberMask(rawValue = emptyString) {\n    const rawValueLength = rawValue.length;\n    if (\n      rawValueLength === 1 &&\n      !Number.isInteger(parseInt(rawValue[0], 10)) &&\n      allowNegative === false\n    ) {\n      return [''];\n    }\n    if (\n      rawValue === emptyString ||\n      (rawValue[0] === prefix[0] && rawValueLength === 1)\n    ) {\n      return prefix\n        .split(emptyString)\n        .concat([digitRegExp])\n        .concat(suffix.split(emptyString));\n    }\n    if (rawValue === decimalSymbol && allowDecimal) {\n      return prefix\n        .split(emptyString)\n        .concat(['0', decimalSymbol, digitRegExp])\n        .concat(suffix.split(emptyString));\n    }\n\n    const isNegative = rawValue[0] === minus && allowNegative;\n    // If negative remove \"-\" sign\n    if (isNegative) {\n      rawValue = rawValue.toString().substr(1);\n    }\n\n    const indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol);\n    const hasDecimal = indexOfLastDecimal !== -1;\n\n    let integer;\n    let fraction;\n    let mask;\n\n    // remove the suffix\n    if (rawValue.slice(suffixLength * -1) === suffix) {\n      rawValue = rawValue.slice(0, suffixLength * -1);\n    }\n\n    if (hasDecimal && (allowDecimal || requireDecimal)) {\n      integer = rawValue.slice(\n        rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0,\n        indexOfLastDecimal,\n      );\n\n      fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength);\n      fraction = convertToMask(fraction.replace(nonDigitsRegExp, emptyString));\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (rawValue.slice(0, prefixLength) === prefix) {\n        integer = rawValue.slice(prefixLength);\n      } else {\n        integer = rawValue;\n      }\n    }\n\n    // eslint-disable-next-line valid-typeof\n    if (integerLimit && typeof integerLimit === number) {\n      const thousandsSeparatorRegex =\n        thousandsSeparatorSymbol === '.'\n          ? '[.]'\n          : `${thousandsSeparatorSymbol}`;\n      const numberOfThousandSeparators = (\n        integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []\n      ).length;\n\n      integer = integer.slice(\n        0,\n        integerLimit +\n          numberOfThousandSeparators * thousandsSeparatorSymbolLength,\n      );\n    }\n\n    integer = integer.replace(nonDigitsRegExp, emptyString);\n\n    if (!allowLeadingZeroes) {\n      integer = integer.replace(/^0+(0$|[^0])/, '$1');\n    }\n\n    integer = includeThousandsSeparator\n      ? addThousandsSeparator(integer, thousandsSeparatorSymbol)\n      : integer;\n\n    mask = convertToMask(integer);\n\n    if ((hasDecimal && allowDecimal) || requireDecimal === true) {\n      if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {\n        mask.push(caretTrap);\n      }\n\n      mask.push(decimalSymbol, caretTrap);\n\n      if (fraction) {\n        // eslint-disable-next-line valid-typeof\n        if (typeof decimalLimit === number) {\n          fraction = fraction.slice(0, decimalLimit);\n        }\n\n        mask = mask.concat(fraction);\n      }\n\n      if (\n        requireDecimal === true &&\n        rawValue[indexOfLastDecimal - 1] === decimalSymbol\n      ) {\n        mask.push(digitRegExp);\n      }\n    }\n\n    if (prefixLength > 0) {\n      mask = prefix.split(emptyString).concat(mask);\n    }\n\n    if (isNegative) {\n      // If user is entering a negative number, add a mask placeholder spot to attract the caret to it.\n      if (mask.length === prefixLength) {\n        mask.push(digitRegExp);\n      }\n\n      mask = [minusRegExp].concat(mask);\n    }\n\n    if (suffix.length > 0) {\n      mask = mask.concat(suffix.split(emptyString));\n    }\n\n    return mask;\n  }\n\n  numberMask.instanceOf = 'createPercentMask';\n\n  return numberMask;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","import createNumberMask from './addons/NumberMask';\nimport createPercentMask from './addons/PercentMask';\n\nexport const MASK_TYPES = {\n  DATE: [/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/],\n  DATE_TIME: [\n    /\\d/,\n    /\\d/,\n    '/',\n    /\\d/,\n    /\\d/,\n    '/',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    ' ',\n    /[0-2]/,\n    /[0-9]/,\n    ':',\n    /[0-5]/,\n    /[0-9]/,\n  ],\n  PHONE: [\n    '(',\n    /[1-9]/,\n    /\\d/,\n    /\\d/,\n    ')',\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    '-',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n  ],\n  PHONE_INTENATIONAL: [\n    '+',\n    '1',\n    ' ',\n    '(',\n    /[1-9]/,\n    /\\d/,\n    /\\d/,\n    ')',\n    ' ',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    '-',\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/,\n  ],\n  SSN: [/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/],\n  US_ZIP_CODE: [/\\d/, /\\d/, /\\d/, /\\d/, /\\d/],\n  NUMBER: createNumberMask,\n  PERCENT: createPercentMask,\n};\n\nexport const maskTypes = [\n  MASK_TYPES.DATE,\n  MASK_TYPES.DATE_TIME,\n  MASK_TYPES.PHONE,\n  MASK_TYPES.PHONE_INTENATIONAL,\n  MASK_TYPES.SSN,\n  MASK_TYPES.US_ZIP_CODE,\n  MASK_TYPES.NUMBER,\n  MASK_TYPES.PERCENT,\n];\n"],"sourceRoot":""}