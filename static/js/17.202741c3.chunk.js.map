{"version":3,"sources":["PageHeader/Toolbars/ThreeButtonsToolbar.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../src/Toolbar/ToolbarItem.js","../../../../src/Toolbar/ToolbarGroup.js","../../../../src/Toolbar/ToolbarDivider.js","../../../../src/Toolbar/DSToolbar.js","../../../../src/FocusGroup/FocusGrid.js","../../../../src/FocusGroup/focusGroupManagerHoc.js","../../../../../src/FocusGroup/utils/getNextCellPosition.js","../node_modules/@elliemae/ds-utilities/cjs/hooks/useHotkeys.js"],"names":["memo","withDepth","data-testid","labelText","children","extraProps","component","cloneElement","className","ToolbarItem","icon","menu","undefined","otherProps","ref","useRef","useFocusGroupItem","btn","buttonType","innerRef","placement","Position","triggerComponent","PropTypes","string","ToolbarGroupContainer","space","ToolbarGroup","size","classProps","decorateToolbarChildren","aggregatedClasses","ToolbarDivider","ToolbarContainer","alignment","DSToolbar","containerProps","autoFocusOnMount","containerRef","getContainer","keyBindings","Tab","orientation","mergeRefs","FocusGridContext","createContext","Provider","preventDefault","e","shouldWrapRows","shouldWrapCells","shouldRefocus","hotKeys","focusedRow","focusedCell","grid","child","React","decoratedChild","getNode","rowIndex","cellIndex","get","register","node","columnIndex","Array","prevNode","current","useEffect","focusNextCell","directionY","directionX","position","getNextCellPosition","currentCell","currentRow","Object","handler","options","useHotkeys","keys","registerHotKeysHooks","defaultKeyBindings","ArrowUp","runAll","ArrowRight","ArrowDown","ArrowLeft","Home","End","nextKeyBindings","defaultBindings","onKeyDown","action","isFunction","activate","container","deactivate","valueProvider","useMemo","value","WrappedComponent","onExitFocusGroup","onFocusPrevGroup","focusKeyBindings","props","nextRow","nextCell","rowCount","isLeftRight","cellsLength","_interopDefault","ex","require","hotkeys","module","exports","_ref","_ref$options","deps","arguments","length","memoizedCallback","useCallback","unbind"],"mappings":"iGAAA,4CAqBeA,0BAjBa,kBAC1B,kBAAC,IAAD,CAAWC,WAAW,GACpB,kBAAC,IAAD,CACEC,cAAY,8BACZC,UAAU,wBAEZ,kBAAC,IAAD,CACED,cAAY,8BACZC,UAAU,WAEZ,kBAAC,IAAD,CACED,cAAY,0BACZC,UAAU,kB,kMCdhB,EAAe,SAACC,GAAD,IAAWC,EAAX,iEACb,oBACE,SAAAC,GAAS,OAAKA,EAAYC,uBAAaD,EAAW,OAAZ,IAAY,CAAZ,8BAEjCA,EAFiC,WAGpCE,UAAW,GAAF,OAAKF,QAAL,8BAHF,IAFE,OCITG,EAAc,SAAC,GAKf,IAJJC,EAII,EAJJA,KACAP,EAGI,EAHJA,UAGI,IAFJQ,YAEI,WAFGC,EAEH,EADDC,EACC,2CACEC,EAAMC,iBAAZ,MAEAC,eACA,IAAMC,EACJ,wCAEEC,WAFF,OAGER,KAHF,EAIES,SAJF,EAKEhB,UAAWA,KAGf,SACS,8CACFQ,EADE,WAELS,UAAWC,IAFN,WAGLC,iBAAkBL,KAGtB,GAGFR,4BAEAA,YAAwB,CACtBC,KAAMa,IADgB,QAEtBpB,UAAWoB,IAAUC,QClCvB,IAEMC,EAAwB,mBAF9B,gBAE8B,MAA0C,gBAAGC,EAAH,yDAIlEC,EAAe,SAAC,GAAkC,IAAhCvB,EAAgC,EAAhCA,SAAUwB,EAAsB,EAAtBA,KAAsB,IAAhBF,aAAgB,MAAR,EAAQ,EACtD,OACE,qBACEG,WAAY,CAAEH,UAEbI,EAAwB1B,EAAU,CAAEwB,WCXpBG,mBAFvB,UAEA,WAEAC,6BCIA,IAEMC,EAAmB,mBAFzB,UAEyB,MAGvB,kBAAGhC,EAAH,YAAciC,EAAd,YAAyBN,EAAzB,iBACE,iBAAkB3B,GADpB,6CAOIkC,EAAY,SAAC,GASb,QARJC,sBAQI,MARa,GAQb,EAPJjB,EAOI,EAPJA,SAOI,IANJlB,iBAMI,aALJiC,iBAKI,MALQ,QAKR,MAJJG,wBAII,aAHJjC,gBAGI,MAHO,GAGP,MAFJwB,YAEI,MAFG,SAEH,EADDf,EACC,0GACEyB,EAAevB,iBAArB,MACA,OACE,uBACEsB,iBADF,EAEEE,aAAc,kBAAMD,EAAN,SACdE,YAAa,CACXC,IAAK,QAEPC,YAAY,cAEZ,wCAGEb,WAAY,CAAE5B,UAAF,EAAaiC,UAAb,EAAwBN,QACpCT,SAAUwB,oBAAUxB,EAAUmB,KAE7BR,EAfP,MAqBFK,YAAsB,CACpBC,eAAgBb,UADI,IAGpBtB,UAAWsB,IAHS,KAKpBW,UAAWX,UAAgB,CAAC,QALR,SAOpBK,KAAML,UAAgB,CAAC,SAAjBA,a,+ICrDKqB,EAAmBC,0BACxBC,EAAaF,EAAbE,SAEFC,EAAiB,SAAAC,GAAC,OAAIA,EAAJ,kB,IAoBT,SAA2B,GAOvC,QANDC,sBAMC,aALDC,uBAKC,aAJDC,qBAIC,SAHD/C,EAGC,EAHDA,SACAoC,EAEC,EAFDA,YACAY,EACC,EADDA,QAEMC,EAAatC,mBACbuC,EAAcvC,mBACdwC,EAAOxC,iBAAb,IACMuB,EAAevB,iBAArB,UACMyC,EAAQC,kBAAd,GACMC,EAAiB,mBAA0B,CAAEvC,SAAUwB,oBAAUa,QAAD,cAEhEG,EAAU,SAAC,GAAD,IAAGC,EAAH,WAAaC,EAAb,mBAA6BC,cAAIP,EAAD,QAAe,CAACK,EAAhD,KAEVG,EAAW,SAACC,EAAMJ,EAAUK,GAChC,IACKC,cAAcX,UAAnB,MACEA,iBAGEK,OAAJ,IAAsBK,EACpBD,6BAEAA,8BAGFA,UAAe,WACb,IAAMG,EAAWR,EAAQ,CACvBC,SAAUP,EADa,QAEvBQ,UAAWP,EAAYc,UAGzB,GAAcD,8BAEdH,6BACAX,YACAC,aAEFC,oBAGFc,qBAAU,WACR,KAAmB,CACjB,IAAMT,EAAWP,EAAjB,QACMQ,EAAYP,EAAlB,QAEMU,EAAOF,cAAIP,EAAD,QAAe,CAACK,EAAhC,IACA,GAAUI,cAKd,IAAMM,EAAgB,SAACC,EAAYC,EAAYC,GAAa,MAC1BA,GAAYC,YAAoB,CAC9DnB,KAAMA,EADwD,QAE9DoB,YAAarB,EAFiD,QAG9DsB,WAAYvB,EAHkD,QAI9DmB,WAJ8D,EAK9DD,WAL8D,EAM9DrB,gBAN8D,EAO9DD,mBAPMW,EADkD,WACxCC,EADwC,YAWpDG,EAAOL,EAAQ,CAAEC,SAAF,EAAYC,cAGjC,IACEG,UACAX,YACAC,eA1FN,SAA8BF,EAAS,GAA6B,IAA3BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YACnDuB,wBAA6B,YAAS,MACPzB,EADO,GAC5B0B,EAD4B,UACnBC,EADmB,UAEpCC,IAAW,CACTC,KADS,EAETH,QAAS,YACP9B,mBACA8B,EAAQ,CACNlB,SAAUP,EADJ,QAENQ,UAAWP,EAAYc,WAG3BW,eAkFJG,CAAqB9B,EAAS,CAAEE,YAAF,EAAeD,eAE7C,IAAM8B,EAAqB,OAAH,IAAG,CAAH,CACtBC,QAASC,iBAAOtC,GAAgB,kBAAMuB,GAAa,EAAnB,MAChCgB,WAAYD,iBAAOtC,GAAgB,kBAAMuB,EAAc,EAApB,MACnCiB,UAAWF,iBAAOtC,GAAgB,kBAAMuB,EAAc,EAApB,MAClCkB,UAAWH,iBAAOtC,GAAgB,kBAAMuB,EAAc,GAApB,MAClCmB,KAAMJ,iBAAOtC,GACX,YACE,IAAIa,EAAWP,EAAf,QACIL,EAAJ,UACEY,KAEFU,EAAc,EAAD,EAGX,CAAEV,SAAF,EAAYC,UAAW,OAG7B6B,IAAKL,iBAAOtC,GACV,YACE,IAAIa,EAAWP,EAAf,QACIL,EAAJ,UACEY,EAAWL,iBAAXK,GAEFU,EAAc,EAAD,EAGX,CAAEV,SAAF,EAAYC,UAAWN,oBAAyB,QA1BxD,GA+BMoC,EAAkB,wBACpBnD,EAAY,CACZoD,gBADY,EAEZhC,SAAUP,EAFE,QAGZQ,UAAWP,EAAYc,UAJH,8BAAxB,GASMyB,EAAY,SAAC7C,GACjB,aAAIA,+BAAJ,CACA,IAAM8C,EAASH,EAAgB3C,EAA/B,KACI+C,qBAAJ,IAAwBD,OAW1BzB,qBAAU,WAER,OADS/B,EAAT0D,QARAC,iCASO,YANU,SAACA,GAClBA,sCAMEC,CAAW5D,EAAX4D,YAHJ7B,IAQA,IAAM8B,EAAgBC,mBAAQ,iBAAO,CACnCrC,cADF,IAIA,OACE,qBAAUsC,MAAOF,GADnB,K,yOC3Ka,SAAuBG,GAAgC,IAAdvB,EAAc,uDAAJ,GAChE,OAAO,gBACLwB,EADK,mBACaC,EADb,mBAC+BC,EAD/B,mBACoDC,EADpD,iFAGL,mCACElE,YADF,EAEE+D,iBAFF,EAGEC,iBAAkBA,GAHpB,GAME,qCATG,O,oDCJM,SAA6B,GAQzC,IAPDjD,EAOC,EAPDA,KAOC,IANDqB,kBAMC,MANY,EAMZ,MALDD,mBAKC,MALa,EAKb,EAJDJ,EAIC,EAJDA,WACAC,EAGC,EAHDA,WACAtB,EAEC,EAFDA,gBACAD,EACC,EADDA,eAEI0D,EAAU/B,EAAd,EACIgC,EAAWjC,EAAf,EACMkC,EAAWtD,EAAjB,OACMuD,EAAN,IAAoBtC,EAEpB,MACE,SAGF,IAAMuC,EAAcxD,KAVnB,OAyCD,OA5BIL,GAAJ,IAEM0D,EAAJ,IACEA,EAAWG,EAAXH,EACAD,MAGEC,GAAJ,IACEA,IACAD,OAKA1D,IAAJ,IAEM0D,EAAJ,GACEC,KAEIrD,EADJoD,EAAUE,EAAVF,IACqBC,GAAjBrD,IAAmCA,KAAvC,KACEoD,QAEOA,OAAwBpD,KAA5B,MACLoD,IACAC,OAIG,CACL/C,UADK,EAELD,SAAU+C,K,iCClDd,SAASK,EAAiBC,GAAM,OAAQA,GAAqB,kBAAPA,GAAoB,YAAaA,EAAMA,EAAE,QAAcA,EAE7G,IAAIxD,EAAQyD,EAAQ,GAEhBC,GADiBH,EAAgBvD,GACvBuD,EAAgBE,EAAQ,MAiBtCE,EAAOC,QAfP,SAAoBC,GAClB,IAAIrC,EAAOqC,EAAKrC,KACZH,EAAUwC,EAAKxC,QACfyC,EAAeD,EAAKvC,QACpBA,OAA2B,IAAjBwC,EAA0B,GAAKA,EACzCC,EAAOC,UAAUC,OAAS,QAAsB9G,IAAjB6G,UAAU,GAAmBA,UAAU,GAAK,GAC3EE,EAAmBlE,EAAMmE,YAAY9C,EAAS0C,GAClD/D,EAAMY,WAAU,WAEd,OADA8C,EAAQlC,EAAMF,EAAS4C,GAChB,WACL,OAAOR,EAAQU,OAAO5C,MAEvB,CAAC0C","file":"static/js/17.202741c3.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nconst ThreeButtonsToolbar = () => (\n  <DSToolbar withDepth={false}>\n    <DSButton\n      data-testid=\"workflow-rules-toggle-rules\"\n      labelText=\"Activate/Deactivate\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-delete-rules\"\n      labelText=\"Delete\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-add-rule\"\n      labelText=\"New Rule\"\n    />\n  </DSToolbar>\n);\n\nexport default memo(ThreeButtonsToolbar);\n","import React, { cloneElement } from 'react'\n\nexport default (children, extraProps = {}) => (\n  React.Children.map(children,\n    component => (component ? cloneElement(component, {\n      ...extraProps,\n      ...component.props,\n      className: `${component.props.className} toolbar-item`,\n    }) : component), null)\n)\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport { useFocusGroupItem } from '@elliemae/ds-shared/esm/FocusGroup'\nimport { Position } from '../Popper/positions'\n\nconst ToolbarItem = ({\n  icon,\n  labelText,\n  menu = undefined,\n  ...otherProps\n}) => {\n  const ref = useRef(null)\n\n  useFocusGroupItem(ref)\n  const btn = (\n    <DSButton\n      {...otherProps}\n      buttonType='text'\n      icon={icon}\n      innerRef={ref}\n      labelText={labelText}\n    />\n  )\n  if (menu) {\n    return React.cloneElement(menu, {\n      ...menu.props,\n      placement: Position.BOTTOM_END,\n      triggerComponent: btn,\n    })\n  }\n  return btn\n}\n\nToolbarItem.displayName = 'ToolbarItem'\n\nToolbarItem.propTypes = {\n  icon: PropTypes.element,\n  labelText: PropTypes.string,\n}\n\nexport default ToolbarItem\n","import React from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport decorateToolbarChildren from './decorateToolbarChildren'\n\nconst blockName = 'toolbar-group'\n\nconst ToolbarGroupContainer = aggregatedClasses('div')(blockName, null, ({ space }) => ({\n  [`space-${space}`]: !!space,\n}))\n\nconst ToolbarGroup = ({ children, size, space = 0 }) => {\n  return (\n    <ToolbarGroupContainer\n      classProps={{ space }}\n    >\n      {decorateToolbarChildren(children, { size })}\n    </ToolbarGroupContainer>\n  )\n}\n\nexport default ToolbarGroup\n","import { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'toolbar'\n\nconst ToolbarDivider = aggregatedClasses('div')(blockName, 'divider')\n\nToolbarDivider.displayName = 'ToolbarDivider'\n\nexport default ToolbarDivider\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","import React, {\n  createContext, useEffect, useMemo, useRef,\n} from 'react'\nimport { isFunction, runAll, get } from '@elliemae/ds-utilities/utils'\nimport useHotkeys from '@elliemae/ds-utilities/hooks/useHotkeys'\nimport { mergeRefs } from '@elliemae/ds-utilities/system'\nimport getNextCellPosition from './utils/getNextCellPosition'\n\nexport const FocusGridContext = createContext()\nconst { Provider } = FocusGridContext\n\nconst preventDefault = e => e.preventDefault()\n\nfunction registerHotKeysHooks(hotKeys, { focusedRow, focusedCell }) {\n  Object.keys(hotKeys).forEach((key) => {\n    const { handler, options } = hotKeys[key]\n    useHotkeys({\n      keys: key,\n      handler: (e) => {\n        e.preventDefault()\n        handler({\n          rowIndex: focusedRow.current,\n          cellIndex: focusedCell.current,\n        })\n      },\n      options,\n    })\n  })\n}\n\n// eslint-disable-next-line max-statements\nexport default function FocusGridProvider({\n  shouldWrapRows = false,\n  shouldWrapCells = false,\n  shouldRefocus = true,\n  children,\n  keyBindings,\n  hotKeys,\n}) {\n  const focusedRow = useRef()\n  const focusedCell = useRef()\n  const grid = useRef([])\n  const containerRef = useRef(document)\n  const child = React.Children.only(children)\n  const decoratedChild = React.cloneElement(child, { innerRef: mergeRefs(child.props.innerRef, containerRef) })\n\n  const getNode = ({ rowIndex, cellIndex }) => get(grid.current, [rowIndex, cellIndex])\n\n  const register = (node, rowIndex, columnIndex) => {\n    if (!node) return\n    if (!Array.isArray(grid.current[rowIndex])) {\n      grid.current[rowIndex] = []\n    }\n\n    if (rowIndex === 0 && columnIndex === 0) {\n      node.setAttribute('tabindex', 0)\n    } else {\n      node.setAttribute('tabindex', -1)\n    }\n\n    node.onfocus = () => {\n      const prevNode = getNode({\n        rowIndex: focusedRow.current,\n        cellIndex: focusedCell.current,\n      })\n\n      if (prevNode) prevNode.setAttribute('tabindex', -1)\n\n      node.setAttribute('tabindex', 0)\n      focusedRow.current = rowIndex\n      focusedCell.current = columnIndex\n    }\n    grid.current[rowIndex][columnIndex] = node\n  }\n\n  useEffect(() => {\n    if (shouldRefocus) {\n      const rowIndex = focusedRow.current\n      const cellIndex = focusedCell.current\n\n      const node = get(grid.current, [rowIndex, cellIndex])\n      if (node) node.focus()\n    }\n  })\n\n\n  const focusNextCell = (directionY, directionX, position) => {\n    const { rowIndex, cellIndex } = position || getNextCellPosition({\n      grid: grid.current,\n      currentCell: focusedCell.current,\n      currentRow: focusedRow.current,\n      directionX,\n      directionY,\n      shouldWrapCells,\n      shouldWrapRows,\n    })\n\n    const node = getNode({ rowIndex, cellIndex })\n\n    // can focus\n    if (node) {\n      node.focus()\n      focusedRow.current = rowIndex\n      focusedCell.current = cellIndex\n    }\n  }\n\n  registerHotKeysHooks(hotKeys, { focusedCell, focusedRow })\n\n  const defaultKeyBindings = {\n    ArrowUp: runAll(preventDefault, () => focusNextCell(-1, 0)),\n    ArrowRight: runAll(preventDefault, () => focusNextCell(0, 1)),\n    ArrowDown: runAll(preventDefault, () => focusNextCell(1, 0)),\n    ArrowLeft: runAll(preventDefault, () => focusNextCell(0, -1)),\n    Home: runAll(preventDefault,\n      (e) => {\n        let rowIndex = focusedRow.current\n        if (e.ctrlKey) {\n          rowIndex = 0\n        }\n        focusNextCell(\n          0,\n          0,\n          { rowIndex, cellIndex: 0 })\n      },\n    ),\n    End: runAll(preventDefault,\n      (e) => {\n        let rowIndex = focusedRow.current\n        if (e.ctrlKey) {\n          rowIndex = grid.current.length - 1\n        }\n        focusNextCell(\n          0,\n          0,\n          { rowIndex, cellIndex: grid.current[0].length - 1 })\n      },\n    ),\n    ...keyBindings,\n  }\n  const nextKeyBindings = isFunction(keyBindings)\n    ? keyBindings({\n      defaultBindings: defaultKeyBindings,\n      rowIndex: focusedRow.current,\n      cellIndex: focusedCell.current,\n    })\n    : { ...defaultKeyBindings, ...keyBindings }\n\n\n  const onKeyDown = (e) => {\n    if (e.target.tagName.toLowerCase() === 'input') return\n    const action = nextKeyBindings[e.key]\n    if (isFunction(action)) action(e)\n  }\n\n  const activate = (container) => {\n    container.addEventListener('keydown', onKeyDown, true)\n  }\n\n  const deactivate = (container) => {\n    container.removeEventListener('keydown', onKeyDown, true)\n  }\n\n  useEffect(() => {\n    activate(containerRef.current)\n    return () => {\n      deactivate(containerRef.current)\n    }\n  }, [])\n\n\n  const valueProvider = useMemo(() => ({\n    register,\n  }), [])\n\n  return (\n    <Provider value={valueProvider}>\n      {decoratedChild}\n    </Provider>\n  )\n}\n","/* eslint-disable react/display-name */\nimport React from 'react'\nimport FocusGroupManager from './FocusGroupManager'\n\nexport default function FocusGroupHoc(WrappedComponent, options = {}) {\n  return ({\n    onExitFocusGroup, onFocusPrevGroup, focusKeyBindings, ...props\n  }) => (\n    <FocusGroupManager\n      keyBindings={focusKeyBindings}\n      onExitFocusGroup={onExitFocusGroup}\n      onFocusPrevGroup={onFocusPrevGroup}\n      {...options}\n    >\n      <WrappedComponent {...props} {...options} />\n    </FocusGroupManager>\n  )\n}\n","// eslint-disable-next-line max-statements\nexport default function getNextCellPosition({\n  grid,\n  currentRow = 0,\n  currentCell = 0,\n  directionY,\n  directionX,\n  shouldWrapCells,\n  shouldWrapRows,\n}) {\n  let nextRow = currentRow + directionY\n  let nextCell = currentCell + directionX\n  const rowCount = grid.length\n  const isLeftRight = directionX !== 0\n\n  if (!rowCount) {\n    return false\n  }\n\n  const cellsLength = grid[0].length\n\n  // moving horizontally\n  if (shouldWrapCells && isLeftRight) {\n    // to left\n    if (nextCell < 0) {\n      nextCell = cellsLength - 1\n      nextRow -= 1\n    }\n\n    if (nextCell >= cellsLength) {\n      nextCell = 0\n      nextRow += 1\n    }\n  }\n\n  // moving vertically\n  if (shouldWrapRows && !isLeftRight) {\n    // to top\n    if (nextRow < 0) {\n      nextCell -= 1\n      nextRow = rowCount - 1\n      if (grid[nextRow] && nextCell >= 0 && !grid[nextRow][nextCell]) {\n        nextRow -= 1\n      }\n    } else if (nextRow >= rowCount || !grid[nextRow][nextCell]) {\n      nextRow = 0\n      nextCell += 1\n    }\n  }\n\n  return {\n    cellIndex: nextCell,\n    rowIndex: nextRow,\n  }\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = require('react');\nvar React__default = _interopDefault(React);\nvar hotkeys = _interopDefault(require('hotkeys-js'));\n\nfunction useHotkeys(_ref) {\n  var keys = _ref.keys,\n      handler = _ref.handler,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var memoizedCallback = React.useCallback(handler, deps);\n  React.useEffect(function () {\n    hotkeys(keys, options, memoizedCallback);\n    return function () {\n      return hotkeys.unbind(keys);\n    };\n  }, [memoizedCallback]);\n}\n\nmodule.exports = useHotkeys;\n"],"sourceRoot":""}