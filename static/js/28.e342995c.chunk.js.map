{"version":3,"sources":["utils/randomTreeNodes.js","utils/tree.util.js","TreeView/customHooks/useTreeInitialSelectionState.js","TreeView/AutoScroll/Overview.js"],"names":["randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","evalParent","hash","selectedItems","acc","parentId","mixed","parents","push","selectedChilds","filter","child","concat","length","newMixed","items","selectedItemsMapper","treeViewRef","allItems","filterFn","selectedIds","get","Object","keys","reduce","item","useTreeInitialSelectionState","allTreeItems","useState","selectionHash","setSelectionHash","useEffect","initialState","isArray","nodes","onItemClick","console","log","Overview","data","ref","useRef","toggleExpandAll","current","actions","expandAll","fluid","instanceRef","groupIcon","itemIcon","selection","plugins","SelectablePluginTree"],"mappings":"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","file":"static/js/28.e342995c.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n","import get from 'lodash/get';\n\n// Meant to hold any reusable functionality related to dimsum's tree view component\n\n/**\n * Verifies if the parent element has selected children\n *\n * @param {object} param all params\n * @param {object} param.hash { [id]: ... } all tree elements in a hash object\n * @param {Array} param.selectedItems The selected items, must include parent key { parent, ... }\n * @param {object} param.acc { items (object), parents (array) }\n * items: all selected elements\n * @param {string} param.parentId The parent identifier\n * @param {boolean} param.mixed Allows marking the selection as indeterminate\n * @returns {object} Same *acc* with the correct parent selected state { items (object), parents (array) }\n */\nexport const evalParent = ({\n  hash,\n  selectedItems,\n  acc,\n  parentId,\n  mixed = false,\n}) => {\n  const parent = hash[parentId];\n  acc.parents.push(parent);\n  let selectedChilds = selectedItems.filter(\n    (child) => child.parent === parentId,\n  );\n  selectedChilds = selectedChilds.concat(\n    acc.parents.filter((child) => child.parent === parentId),\n  );\n  if (parent.children.length > 0) {\n    let newMixed = mixed;\n    if (parent.children.length === selectedChilds.length && !mixed) {\n      acc.items[parentId] = true; // mark as selected\n    } else {\n      acc.items[parentId] = 'mixed';\n      newMixed = true; // mark as indterminate\n    }\n    if (parent.parent && !acc.items[parent.parent]) {\n      return evalParent({\n        hash,\n        selectedItems,\n        acc,\n        parentId: parent.parent,\n        mixed: newMixed,\n      });\n    }\n  }\n  return acc;\n};\n\n/**\n * HOF that returns a mapper for selected items ids from TreeView's state.\n * Can provide a filter for each of the selected elements\n *\n * @example <caption> Returned Function Usage </caption>\n * getSelectedItems((item) => item.type === 'task'); // only getting task elements\n * @param {*} treeViewRef The tree view component's reference\n * @param {*} allItems All tree records/items in a key hash\n * @returns {Function} The getSelectedItems function that receives an optional filter function\n */\nexport const selectedItemsMapper = (treeViewRef, allItems) => (\n  filterFn = () => true,\n  selectedIds = get(treeViewRef, 'current.state.selection', {}), // check this object, could be some timing issues with the selection\n) => {\n  // Timeout is used to get new state from the treeview\n  const selectedItems = Object.keys(selectedIds).reduce(\n    (items, id) => {\n      if (id === 'all' || !selectedIds[id]) return items;\n      const item = allItems[id];\n      if (!item || !filterFn(item)) return items;\n      items.push(item);\n      return items;\n    },\n    [],\n  );\n  return selectedItems;\n};\n","import { useEffect, useState } from 'react';\nimport { evalParent } from '../../utils/tree.util';\n\n/**\n * Sets the initial selection state\n *\n * @param {object} allTreeItems hash object with all tree elements\n * @param {Array} items The initially selected items. Could be an array for multiSelect or a single object\n * @returns {object} The selections hash object, each key (id) representing a selected tree element\n */\nexport const useTreeInitialSelectionState = (\n  allTreeItems,\n  items = [],\n) => {\n  const [selectionHash, setSelectionHash] = useState({});\n\n  useEffect(() => {\n    let initialState = {};\n    const selectedItems = Array.isArray(items) ? items : [items];\n    if (selectedItems.length) {\n      initialState = selectedItems.reduce(\n        (acc, item) => {\n          acc.items = { ...acc.items, [item.id]: true };\n          if (item.parent && !acc.items[item.parent]) {\n            return evalParent({\n              hash: allTreeItems,\n              selectedItems,\n              acc,\n              parentId: item.parent,\n            });\n          }\n          return acc;\n        },\n        { items: [], parents: [] },\n      );\n    }\n    setSelectionHash(initialState.items);\n  }, [allTreeItems, items]);\n\n  return selectionHash;\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  // TreeDndPlugin,\n  // TreeToolbarPlugin\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport { useTreeInitialSelectionState } from '../customHooks/useTreeInitialSelectionState';\nimport { randomEntities } from '../../utils/randomTreeNodes';\n// import { TooltipTextProvider } from \"@elliemae/ds-basic/TruncatedTooltipText\";\n// import renderToolbar from \"./renderToolbar\";\n\nconst nodes = randomEntities(50);\n\nconst onItemClick = (item) => {\n  console.log(111, item);\n};\n\nconst Overview = () => {\n  const [data] = useState(nodes);\n  const selectionHash = useTreeInitialSelectionState(nodes, [\n    nodes[40],\n  ]);\n  const ref = useRef(null);\n\n  const expandAll = () => {\n    const toggleExpandAll = ref.current.actions.toggleExpandAll;\n    console.log('REF', ref.current);\n    if (toggleExpandAll) toggleExpandAll();\n  };\n\n  useEffect(() => {\n    expandAll();\n  }, []);\n\n  return (\n    <TreeView\n      data={data}\n      fluid\n      instanceRef={ref}\n      groupIcon={<Folder />}\n      itemIcon={<FilePdf />}\n      selection={selectionHash}\n      // labelRenderer={value => value}\n      // onOrderChange={setData}\n      onItemClick={onItemClick}\n      plugins={[SelectablePluginTree]}\n      // renderToolbar={renderToolbar}\n      // showChildrenAmount\n      // sortable\n      // width={400}\n    />\n  );\n};\n\nexport default Overview;\n"],"sourceRoot":""}