{"version":3,"sources":["../../../src/CloseCircle.js","../../../../../src/form/Input/InputAddonWrapper.js","../../../../../src/form/Input/InputImpl.js","../../../../../src/form/Input/showEllipsis.js","../../../../../src/form/Input/DSInput.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../src/constants.js","../../../../../src/form/TextBox/DSTextBox.js"],"names":["createIcon","paths","height","width","InputWrapper","aggregatedClasses","InputAddon","left","right","variant","InputAddonWrapper","components","this","renderAddonComponent","Array","comp","containerProps","classProps","component","key","index","className","innerRef","rightComponents","leftComponents","children","InputComponent","React","hasError","readOnly","disabled","rightAddon","getRightAddon","leftAddon","getLeftAddon","Component","Input","clearable","value","WrapperForTooltipInput","InputCustomWrapper","ClearableButton","getValidComponents","noop","InputImpl","active","showTooltip","e","onBlur","onFocus","client","window","onClear","onChange","target","ref","current","focus","buttonType","data-testid","icon","onClick","handleClear","role","id","isShowElipsisActive","autoFocus","name","maxLength","minLength","placeholder","leftComponent","rightComponent","disableTooltip","onKeyDown","onKeyUp","onPaste","required","type","customInputType","min","max","onMouseLeave","onMouseOut","style","tabIndex","rest","filter","inputProps","autocomplete","onMouseEnter","String","showEllipsis","isOpen","title","zIndex","triggerComponent","PropTypes","props","Error","fluidWidth","otherProps","aria-label","TooltipType","TooltipContainer","TooltipText","DSTooltip","placement","PopperPositions","TOP","delayClose","delayOpen","interactionType","PopperInteractions","HOVER","undefined","onOpen","springAnimationComponent","tooltipType","showArrow","otherTooltipProps","tooltipBlockName","convertPropToCssClassName","Content","blockName","contentComponent","getComponentFromProps","bool","DSTextBox","string"],"mappings":"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","file":"static/js/1.42b86c5b.chunk.js","sourcesContent":["/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M15 10.5c0 3.038-2.462 5.5-5.5 5.5S4 13.538 4 10.5 6.462 5 9.5 5 15 7.462 15 10.5zm-2.672-2.121l-.707-.707L9.5 9.793 7.379 7.672l-.707.707L8.793 10.5l-2.121 2.121.707.707L9.5 11.207l2.121 2.121.707-.707-2.121-2.121 2.121-2.121z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\n\nconst blockName = 'input-addon-wrapper';\n\nconst InputWrapper = aggregatedClasses('div')(blockName);\nconst InputAddon = aggregatedClasses('span')(\n  blockName,\n  'addon',\n  ({ left, right, variant }) => ({\n    left,\n    right,\n    [variant]: variant,\n  }),\n);\n\nexport default class InputAddonWrapper extends Component {\n  static defaultProps = {\n    rightComponents: [],\n    leftComponents: [],\n    containerProps: {},\n  };\n\n  getLeftAddon(components) {\n    return this.renderAddonComponent(true, components);\n  }\n\n  getRightAddon(components) {\n    return this.renderAddonComponent(false, components);\n  }\n\n  renderAddonComponent(left = true, components) {\n    if (!components) return null;\n    if (Array.isArray(components)) {\n      if (!components.filter(comp => comp).length) return null;\n    }\n    const { containerProps } = this.props;\n    const classProps = left ? { left: true } : { right: true };\n\n    return (\n      <InputAddon classProps={classProps} {...containerProps}>\n        {components.map(\n          (component, index) =>\n            component &&\n            React.cloneElement(component, { ...component.props, key: index }),\n        )}\n      </InputAddon>\n    );\n  }\n\n  render() {\n    const {\n      className,\n      innerRef,\n      rightComponents,\n      leftComponents,\n      children,\n      variant,\n      containerProps,\n    } = this.props;\n\n    const InputComponent = React.Children.only(children);\n\n    const { hasError, readOnly, disabled } = InputComponent.props;\n\n    const rightAddon = this.getRightAddon([...rightComponents]);\n    const leftAddon = this.getLeftAddon([...leftComponents]);\n\n    return (\n      <InputWrapper\n        className={className}\n        classProps={{\n          hasError,\n          readOnly,\n          disabled,\n          variant,\n        }}\n        innerRef={innerRef}\n        {...containerProps}\n      >\n        {leftAddon}\n        {InputComponent}\n        {rightAddon}\n      </InputWrapper>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport CloseCircle from '@elliemae/ds-icons/CloseCircle';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\nimport InputAddonWrapper from './InputAddonWrapper';\nimport { showEllipsis } from './showEllipsis';\n\nconst blockName = 'input';\nconst Input = aggregatedClasses('input')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst WrapperForTooltipInput = aggregatedClasses('div')(\n  blockName,\n  'tooltip-ref',\n);\nconst InputCustomWrapper = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ clearable, value }) => ({\n    clearable,\n    value,\n  }),\n);\nconst ClearableButton = aggregatedClasses(DSButton)(blockName, 'clearable');\n\nconst getValidComponents = component => component;\n\nconst noop = () => null;\nclass InputImpl extends Component {\n  static defaultProps = {\n    onBlur: noop,\n    onFocus: noop,\n  };\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.refTooltip = React.createRef();\n  }\n\n  state = {\n    width: -1,\n    active: false,\n    showTooltip: false,\n  };\n\n  componentDidMount() {\n    this.setWidth();\n    window.addEventListener('resize', this.setWidth);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setWidth);\n  }\n\n  handleBlur = e => {\n    const { onBlur } = this.props;\n    onBlur(e);\n    this.setState({\n      active: false,\n    });\n  };\n\n  handleFocus = e => {\n    const { onFocus } = this.props;\n    onFocus(e);\n    this.setState({\n      active: true,\n    });\n  };\n\n  handleMouseEnter = () => {\n    this.setState({\n      showTooltip: true,\n    });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({\n      showTooltip: false,\n    });\n  };\n\n  setWidth = () => {\n    const client = this.refTooltip.current.getBoundingClientRect();\n    this.setState({\n      width: client.width,\n    });\n  };\n\n  handleClear() {\n    const { onClear, onChange, clearable } = this.props;\n    if (clearable && onClear) {\n      onClear();\n    } else {\n      onChange({ target: { value: '' } });\n    }\n\n    if ((this.ref || {}).current) this.ref.current.focus();\n  }\n\n  renderClearableComponent() {\n    const { clearable, value, disabled } = this.props;\n    if (disabled) return null;\n    return clearable && value ? (\n      <ClearableButton\n        buttonType=\"text\"\n        data-testid=\"ds-input_clearable-btn\"\n        disabled={disabled}\n        icon={<CloseCircle />}\n        onClick={this.handleClear}\n      />\n    ) : null;\n  }\n\n  render() {\n    const {\n      role,\n      id,\n      isShowElipsisActive,\n      autoFocus,\n      className,\n      name,\n      innerRef,\n      maxLength,\n      minLength,\n      placeholder,\n      leftComponent,\n      rightComponent,\n      disableTooltip,\n      readOnly,\n      disabled,\n      value,\n      onClick,\n      onChange,\n      onKeyDown,\n      onKeyUp,\n      onFocus,\n      onBlur,\n      onPaste,\n      required,\n      type,\n      customInputType,\n      min,\n      max,\n      clearable,\n      onMouseLeave,\n      onMouseOut,\n      style,\n      containerProps,\n      tabIndex,\n      ...rest\n    } = this.props;\n    const { width, active, showTooltip } = this.state;\n    const rightComponents = [\n      this.renderClearableComponent(),\n      rightComponent,\n    ].filter(getValidComponents);\n    const leftComponents = [leftComponent].filter(getValidComponents);\n\n    const inputProps = {\n      'aria-label': rest['aria-label'],\n      'aria-placeholder': placeholder,\n      'aria-required': required,\n      'aria-multiline': false,\n      'aria-autocomplete': 'none',\n      'data-testid': rest['data-testid'],\n      role,\n      id,\n      ref: this.ref,\n      className,\n      autoFocus,\n      disabled: disabled || readOnly,\n      innerRef,\n      maxLength,\n      minLength,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      onPaste,\n      onMouseLeave,\n      disableTooltip,\n      onMouseOut,\n      placeholder,\n      required,\n      type,\n      value,\n      min,\n      max,\n      style,\n      tabIndex,\n      ...containerProps,\n    };\n\n    let InputComponent = (\n      <WrapperForTooltipInput ref={this.refTooltip} style={{ width: '100%' }}>\n        {!customInputType ? (\n          <Input\n            {...inputProps}\n            autocomplete=\"off\"\n            clearable={clearable}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            onMouseEnter={this.handleMouseEnter}\n            onMouseLeave={this.handleMouseLeave}\n            value={value}\n          />\n        ) : (\n          <InputCustomWrapper\n            {...containerProps}\n            clearable={clearable}\n            value={value}\n          >\n            {customInputType({\n              ...inputProps,\n            })}\n          </InputCustomWrapper>\n        )}\n      </WrapperForTooltipInput>\n    );\n    if (\n      showEllipsis(width, value) &&\n      !active &&\n      showTooltip &&\n      width &&\n      isShowElipsisActive\n    ) {\n      InputComponent = (\n        <DSTooltip\n          isOpen={disableTooltip}\n          title={String(value)}\n          zIndex={11}\n          triggerComponent={\n            <WrapperForTooltipInput style={{ width: '100%' }}>\n              {InputComponent}\n            </WrapperForTooltipInput>\n          }\n        />\n      );\n    }\n\n    const renderInput =\n      rightComponents.length || leftComponents.length || clearable ? (\n        <InputAddonWrapper\n          className={className}\n          leftComponents={leftComponents}\n          rightComponents={rightComponents}\n          {...containerProps}\n        >\n          {InputComponent}\n        </InputAddonWrapper>\n      ) : (\n        InputComponent\n      );\n\n    return renderInput;\n  }\n}\n\nInputImpl.propTypes = {\n  className: PropTypes.string,\n  customInputType: PropTypes.func,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  isShowElipsisActive: PropTypes.bool,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onPaste: PropTypes.func,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  role: PropTypes.string,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Should be of type string if using ellipsis tooltip [isShowElipsisActive] prop\n   *\n   * @param props\n   * @param propName\n   * @param componentName\n   */\n  value(props, propName, componentName) {\n    // eslint-disable-line consistent-return\n    if (!!props.isShowElipsisActive && typeof props[propName] !== 'string') {\n      return new Error(\n        `Invalid prop \\`${propName}\\` of type \\`${typeof props[\n          propName\n        ]}\\` supplied to` +\n          ` \\`${componentName}\\`. Prop \\`value\\` should be of type \\`string\\` if prop \\`isShowElipsisActive\\` is set to \\`true\\`.` +\n          ' Either set `isShowElipsisActive` to `false`, or properly format your `value` prop to `string`.',\n      );\n    }\n  },\n};\n\nexport default InputImpl;\n","export function showEllipsis(width, value) {\n  return String(value).length * 8 > width;\n}\n","import React from 'react';\nimport InputImpl from './InputImpl';\nimport InputAddonWrapper from './InputAddonWrapper';\n\nconst DSInput = ({\n  containerProps = {},\n  id,\n  autoFocus = false,\n  disabled = false,\n  className = '',\n  clearable = false,\n  name = '',\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  disableTooltip = true,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  customInputType = null,\n  variant,\n  isShowElipsisActive = true,\n  ...otherProps\n}) => (\n  <InputImpl\n    {...otherProps}\n    aria-label={otherProps['aria-label']}\n    autoFocus={autoFocus}\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    customInputType={customInputType}\n    data-testid={otherProps['data-testid'] || 'ds-input_main-component'}\n    disabled={disabled}\n    disableTooltip={disableTooltip}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    id={id}\n    innerRef={innerRef}\n    isShowElipsisActive={isShowElipsisActive}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    name={name}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nexport { InputAddonWrapper };\n\nexport default DSInput;\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  aggregatedClasses,\n  convertPropToCssClassName,\n} from '@elliemae/ds-classnames';\nimport DSPopper, {\n  PopperPositions,\n  PopperInteractions,\n} from '@elliemae/ds-basic/Popper';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants';\nimport { TooltipType } from './TooltipType';\nimport { interactions } from '../Popper/interaction';\nimport { positions } from '../Popper/positions';\n\nconst blockName = 'tooltip';\n\nconst TooltipContainer = aggregatedClasses('div')(blockName);\nconst TooltipText = aggregatedClasses('span')(blockName, 'text');\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(\n    blockName,\n  );\n\n  let Content = title;\n  if (typeof title === 'string') {\n    Content = <TooltipText>{title}</TooltipText>;\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      }\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  );\n};\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.string,\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n};\n\nexport { TooltipType, TooltipContainer, TooltipText };\nexport default DSTooltip;\n","export const DEFAULT_DELAY_OPEN = 200;\nexport const DEFAULT_DELAY_CLOSE = 300;\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large'];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n"],"sourceRoot":""}