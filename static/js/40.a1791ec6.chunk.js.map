{"version":3,"sources":["../../../../../src/form/ExpandableInput/ExpandableInputImpl.js","../../../../../../ds-shared/dist/esm/utils.js","../../../../../src/form/ExpandableInput/DSExpandableInput.js","../../../../../src/form/SearchBox/SearchBoxToggle.js","TreeView/PUI-2579.js"],"names":["ExpandableInput","aggregatedClasses","opened","InputWrapper","ExpandableInputImpl","prevProps","isOpen","this","input","focus","innerRef","triggerComponent","children","width","onOpen","onClose","onBlur","containerProps","InputComponent","React","classProps","style","rightComponents","cloneElement","key","onClick","e","className","node","Component","SearchBoxContainer","SearchBoxToggle","debounce","clearOnSearch","value","prevValue","onSearch","setState","executeIfValue","handleSearch","expandableEl","contains","onChange","onKeyUp","placeholder","clearable","buttonRef","buttonType","icon","showIcon","withSearchable","id","name","type","parent","Searchable","useState","data","setData","instanceRef","useRef","searchQuery","setSearchQuery","height","DSToolbar","withDepth","searchOnEnter","DSSeparator","margin","orientation","TreeView","fluid","groupIcon","Folder","isMultiSelect","itemIcon","FilePdf","onOrderChange","onToggleExpand","item","current","actions","toggleExpand","expandAllChildren","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","sortable"],"mappings":"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","file":"static/js/40.a1791ec6.chunk.js","sourcesContent":["import React, { Component, cloneElement } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { isFunction } from '@elliemae/ds-shared/utils';\nimport { InputAddonWrapper } from '@elliemae/ds-basic/form/Input';\n\nconst blockName = 'expandable-input';\n\nconst ExpandableInput = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ isOpen }) => ({ opened: isOpen }),\n);\nconst InputWrapper = aggregatedClasses(InputAddonWrapper)(\n  blockName,\n  'wrapper',\n  ({ isOpen }) => ({ opened: isOpen }),\n);\n\nexport default class ExpandableInputImpl extends Component {\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props;\n    if (isOpen && isOpen !== prevProps.isOpen) this.input.focus();\n  }\n\n  render() {\n    const {\n      innerRef,\n      triggerComponent,\n      children,\n      width,\n      isOpen,\n      onOpen,\n      onClose,\n      onBlur,\n      containerProps,\n    } = this.props;\n    const InputComponent = React.Children.only(children);\n    const handleTriggerClick = e => {\n      if (isFunction(triggerComponent.onClick)) triggerComponent.onClick(e);\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    };\n\n    return (\n      <ExpandableInput\n        {...containerProps}\n        classProps={{ isOpen }}\n        innerRef={innerRef}\n        style={{ width: isOpen && width }}\n      >\n        <InputWrapper\n          rightComponents={[\n            cloneElement(triggerComponent, {\n              key: 'handler',\n              onClick: handleTriggerClick,\n            }),\n          ]}\n        >\n          {cloneElement(InputComponent, {\n            className: 'expandable-input__input',\n            innerRef: node => (this.input = node),\n            onBlur,\n          })}\n        </InputWrapper>\n      </ExpandableInput>\n    );\n  }\n}\n","import { _ as _defineProperty } from './defineProperty-1e8516b1.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-loops/no-loops, no-cond-assign */\nvar objectType = function objectType(obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1);\n};\nvar isDefined = function isDefined(param) {\n  return typeof param !== 'undefined';\n};\nvar isUndefined = function isUndefined(param) {\n  return typeof param === 'undefined';\n};\nvar isFunction = function isFunction(param) {\n  return typeof param === 'function';\n};\nvar isNumber = function isNumber(param) {\n  return typeof param === 'number' && !isNaN(param);\n}; // eslint-disable-line\n\nvar isString = function isString(str) {\n  return objectType(str) === 'String';\n};\nvar isArray = function isArray(arr) {\n  return objectType(arr) === 'Array';\n};\nvar closest = function closest(target, selector) {\n  // closest(e.target, '.field')\n  while (target) {\n    // eslint-disable-line\n    if (target.matches && target.matches(selector)) return target;\n    if (target.msMatchesSelector && target.msMatchesSelector(selector)) return target;\n    target = target.parentNode;\n  }\n\n  return null;\n};\nvar getOffsetRect = function getOffsetRect(elem) {\n  // (1)\n  var box = elem.getBoundingClientRect();\n  var _document = document,\n      body = _document.body,\n      documentElement = _document.documentElement; // (2)\n\n  var scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n  var scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft; // (3)\n\n  var clientTop = documentElement.clientTop || body.clientTop || 0;\n  var clientLeft = documentElement.clientLeft || body.clientLeft || 0; // (4)\n\n  var top = box.top + scrollTop - clientTop;\n  var left = box.left + scrollLeft - clientLeft;\n  return {\n    top: Math.round(top),\n    left: Math.round(left)\n  };\n};\nvar getTotalScroll = function getTotalScroll(elem) {\n  var top = 0;\n  var left = 0;\n\n  while (elem = elem.parentNode) {\n    top += elem.scrollTop || 0;\n    left += elem.scrollLeft || 0;\n  }\n\n  return {\n    top: top,\n    left: left\n  };\n};\nvar getTransformProps = function getTransformProps(x, y) {\n  return {\n    transform: \"translate(\".concat(x, \"px, \").concat(y, \"px)\")\n  };\n};\nvar listWithChildren = function listWithChildren(list, childrenProp) {\n  return list.map(function (item) {\n    return _objectSpread(_objectSpread({}, item), {}, _defineProperty({}, childrenProp, item[childrenProp] ? listWithChildren(item[childrenProp], childrenProp) : []));\n  });\n};\nvar getAllNonEmptyNodesIds = function getAllNonEmptyNodesIds(items, childrenProp) {\n  var childrenIds = [];\n  var ids = items.filter(function (item) {\n    return item[childrenProp].length;\n  }).map(function (item) {\n    childrenIds = childrenIds.concat(getAllNonEmptyNodesIds(item[childrenProp], childrenProp));\n    return item.id;\n  });\n  return ids.concat(childrenIds);\n};\n\nexport { closest, getAllNonEmptyNodesIds, getOffsetRect, getTotalScroll, getTransformProps, isArray, isDefined, isFunction, isNumber, isString, isUndefined, listWithChildren, objectType };\n//# sourceMappingURL=utils.js.map\n","import React from 'react';\nimport ExpandableInputImpl from './ExpandableInputImpl';\n\nconst DSExpandableInput = ({\n  containerProps = {},\n  innerRef,\n  className = '',\n  style = {},\n  triggerComponent = undefined,\n  children,\n  isOpen = false,\n  onOpen = () => null,\n  onClose = () => null,\n  onBlur = () => null,\n  width = undefined,\n}) => (\n  <ExpandableInputImpl\n    className={className}\n    containerProps={containerProps}\n    innerRef={innerRef}\n    isOpen={isOpen}\n    onBlur={onBlur}\n    onClose={onClose}\n    onOpen={onOpen}\n    style={style}\n    triggerComponent={triggerComponent}\n    width={width}\n  >\n    {children}\n  </ExpandableInputImpl>\n);\n\nexport default DSExpandableInput;\n","import React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\nimport SearchIcon from '@elliemae/ds-icons/Search';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSExpandableInput from '@elliemae/ds-basic/form/ExpandableInput';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport withSearchable from './withSearchable';\n\nconst blockName = 'searchbox-toggle';\nconst SearchBoxContainer = aggregatedClasses('div')(blockName);\n\nclass SearchBoxToggle extends Component {\n  hideInput = debounce(this.handleHideInput, 100);\n\n  showInput = debounce(this.handleShowInput, 100);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n\n    this.hideInput = this.hideInput.bind(this);\n    this.showInput = this.showInput.bind(this);\n    this.handleHideInput = this.handleHideInput.bind(this);\n    this.handleShowInput = this.handleShowInput.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { clearOnSearch, value } = this.props;\n    const { value: prevValue } = prevProps;\n    if (\n      clearOnSearch &&\n      value !== prevValue &&\n      !value &&\n      prevValue &&\n      prevValue.length !== 1\n    ) {\n      this.handleHideInput(false);\n    }\n  }\n\n  handleSearch() {\n    const { onSearch, clearOnSearch } = this.props;\n    onSearch();\n    if (clearOnSearch) this.setState({ isOpen: false });\n  }\n\n  handleHideInput(executeIfValue = true) {\n    const { value } = this.props;\n    if (value) {\n      if (executeIfValue) this.handleSearch();\n    } else {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  handleBlur(e) {\n    if (this.expandableEl.contains(e.target)) return;\n    this.hideInput(false);\n  }\n\n  handleShowInput() {\n    this.setState({ isOpen: true });\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyUp,\n      value,\n      placeholder,\n      clearable,\n      className,\n      buttonRef,\n      containerProps,\n      width = 300,\n    } = this.props;\n    const { isOpen } = this.state;\n    return (\n      <SearchBoxContainer>\n        <DSExpandableInput\n          containerProps={containerProps}\n          innerRef={node => (this.expandableEl = node)}\n          isOpen={isOpen}\n          onBlur={this.handleBlur}\n          onClose={this.hideInput}\n          onOpen={this.showInput}\n          triggerComponent={\n            <DSButton\n              key=\"handler\"\n              buttonType=\"text\"\n              icon={<SearchIcon />}\n              innerRef={buttonRef}\n            />\n          }\n          width={width}\n        >\n          <DSTextBox\n            className={`expandable-input__input ${className}`}\n            clearable={clearable}\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            placeholder={placeholder}\n            showIcon={false}\n            value={value}\n          />\n        </DSExpandableInput>\n      </SearchBoxContainer>\n    );\n  }\n}\n\nexport default withSearchable(SearchBoxToggle);\n","import React, { useRef, useState } from \"react\";\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin\n} from \"@elliemae/ds-treeview\";\nimport Folder from \"@elliemae/ds-icons/Folder\";\nimport FilePdf from \"@elliemae/ds-icons/FilePdf\";\n// import DSButton from '@elliemae/ds-basic/Button'\n// import { ToolbarGroup } from \"@elliemae/ds-basic\";\nimport { SearchBoxToggle } from \"@elliemae/ds-basic/form/SearchBox\";\nimport DSToolbar from \"@elliemae/ds-basic/Toolbar\";\nimport DSSeparator from \"@elliemae/ds-basic/Separator\";\n\nconst node = {\n  id: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n  name: \"BridgeServices_RegressionSuite_QA (2)\",\n  type: \"taskgroup\",\n  parent: undefined,\n  children: [\n    {\n      id: \"4548a528-a0b2-4ee5-8fb3-94628e3320a6\",\n      name: \"Test123 (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    },\n    {\n      id: \"0ba3e4bb-bce5-4c3c-aafc-2f79670ac3b6\",\n      name: \"Test (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    }\n  ]\n};\n\nconst Searchable = () => {\n  const [data, setData] = useState(node.children);\n  const instanceRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <>\n      <div style={{ width: 270, height: \"100%\" }}>\n        <DSToolbar withDepth={false}>\n          {/* <DSButton\n            buttonType='secondary'\n            labelText='Toggle Expand'\n            onClick={() => instanceRef.current.actions.toggleExpandAll()}\n          /> */}\n          <SearchBoxToggle\n            clearable\n            containerProps={{ \"data-testid\": \"tree-searchbox\" }}\n            onSearch={({ value }) => setSearchQuery(value)}\n            placeholder=\"Search all\"\n            searchOnEnter={false}\n            value={searchQuery}\n          />\n        </DSToolbar>\n        <DSSeparator margin=\"none\" orientation=\"horizontal\" type=\"non-form\" />\n        <TreeView\n          data={data}\n          fluid\n          groupIcon={<Folder />}\n          instanceRef={instanceRef}\n          isMultiSelect\n          itemIcon={<FilePdf />}\n          onOrderChange={setData}\n          onToggleExpand={item => {\n            instanceRef.current.actions.toggleExpand(item, {\n              expandAllChildren: true\n            });\n          }}\n          plugins={[SelectablePluginTree, SearchableTreePlugin]}\n          searchQuery={searchQuery}\n          showChildrenAmount\n          sortable\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Searchable;\n"],"sourceRoot":""}