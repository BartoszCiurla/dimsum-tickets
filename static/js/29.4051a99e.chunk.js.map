{"version":3,"sources":["DataGrid/customRenderers/ToggleCell.js","../../../../../src/form/Toggle/toggleHelper.js","../../../src/onClickHandlerForNonInteractiveElements.js","../../../../../src/form/Toggle/DSToggleRender.js","../../../../../src/form/Toggle/DSToggleImpl.js","../../../../../src/form/Toggle/DSToggle.js"],"names":["ToggleCell","customHandlers","onToggle","rowData","metaData","entityType","activeField","id","isChecked","get","dataProps","containerProps","onChange","useCallback","event","stopPropagation","checked","cleanDrag","startPoint","isDragging","dragStartingPoints","circleWidth","boxWidth","drag","onClickHandler","role","tabIndex","onClick","onKeyPress","keycode","className","style","hasError","readOnly","disabled","onBlur","onFocus","onMouseDown","onMouseEnter","onMouseLeave","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","labelOn","labelOff","dragStyle","containerRef","handRef","name","value","size","convertPropToCssClassName","cssClassName","classNameBlock","classNameElement","allowChange","data-testid","aria-disabled","defaultChecked","defaultValue","onClickHandlerForNonInteractiveElements","ref","aria-checked","type","DSToggleImpl","clientX","move","calculateDrag","e","inside","isValidDrag","newCheck","window","props","React","this","prevProps","prevState","snapshot","currentCheckState","checkedProp","nodesInterval","setInterval","clearInterval","transform","state","Component","DSToggle","otherProps","PropTypes"],"mappings":"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","file":"static/js/29.4051a99e.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport DSToggle from '@elliemae/ds-basic/form/Toggle';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst ToggleCell = ({\n  customHandlers: { onToggle = () => {} },\n  metaData: { rowData },\n  entityType = 'workflow-rule',\n  activeField = 'active',\n}) => {\n  const { id } = rowData;\n  const isChecked = get(rowData, activeField);\n  const dataProps = {\n    'data-testid': `${entityType}-${activeField}-toggle`,\n    [`data-${entityType}Id`]: id,\n    containerProps: {\n      'data-testid': `${entityType}-${activeField}-toggle-container`,\n    },\n  };\n  const onChange = useCallback(\n    (event) => {\n      event.stopPropagation();\n      onToggle(rowData);\n    },\n    [onToggle, rowData],\n  );\n  return (\n    <DSToggle\n      {...dataProps}\n      checked={isChecked}\n      onChange={onChange}\n    />\n  );\n};\nToggleCell.propTypes = {\n  customHandlers: PropTypes.shape({\n    onToggle: PropTypes.func,\n  }),\n  metaData: PropTypes.shape({\n    rowData: PropTypes.object,\n  }),\n  entityType: PropTypes.string.isRequired,\n  activeField: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport default ToggleCell;\n","export const isValidDrag = ({\n  inside,\n  circleWidth,\n  drag,\n  checked,\n  boxWidth,\n}) => {\n  const difference = boxWidth - circleWidth;\n  return checked\n    ? !inside && -drag > difference / 2\n    : !inside && drag > boxWidth / 3;\n};\n\nexport const cleanDrag = () => ({\n  startPoint: null,\n  isDragging: false,\n});\n\nexport const calculateDrag = (\n  clientX,\n  { startPoint, checked, isDragging, boxWidth, circleWidth },\n) => {\n  if (!isDragging) return null;\n  const move = startPoint - clientX;\n  const drag = !checked ? clientX - startPoint : boxWidth - circleWidth - move;\n  if (!checked && clientX > 0 && clientX > startPoint && drag < boxWidth * 0.7)\n    return drag;\n  if (checked && clientX > 0 && clientX < startPoint && move < boxWidth * 0.7)\n    return drag;\n  return null;\n};\n\nexport const dragStartingPoints = checked => ({ circleWidth, boxWidth }) => {\n  if (checked) return { drag: boxWidth - circleWidth };\n  return {\n    drag: 0,\n  };\n};\n","/**\n * onClickHandler: callback\n *\n * @param onClickHandler\n */\nexport default onClickHandler => ({\n  role: 'button',\n  tabIndex: '0',\n  onClick: onClickHandler,\n  onKeyPress: event => {\n    event.stopPropagation();\n    const { keycode, key } = event;\n    if (key === 'Enter') onClickHandler(event);\n    else if (keycode === 13) onClickHandler(event);\n  },\n});\n","import React from 'react';\nimport onClickHandlerForNonInteractiveElements from '@elliemae/ds-utilities/onClickHandlerForNonInteractiveElements';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\n\nconst DSToggleRender = ({\n  containerProps,\n  id,\n  className = '',\n  style = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = false,\n  onBlur = () => null,\n  onFocus = () => null,\n  onChange = () => null,\n  onMouseDown = () => null,\n  onMouseEnter = () => null,\n  onMouseLeave = () => null,\n  onTouchCancel = () => null,\n  onTouchEnd = () => null,\n  onTouchMove = () => null,\n  onTouchStart = () => null,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  dragStyle = {},\n  containerRef = null,\n  handRef = null,\n  name = '',\n  value = '',\n  size = 's',\n}) => {\n  const {\n    cssClassName,\n    classNameBlock,\n    classNameElement,\n  } = convertPropToCssClassName('form-element-toggle', className, {\n    hasError,\n    readOnly,\n    disabled,\n    checked,\n    id,\n    size,\n  });\n  const allowChange = disabled || readOnly;\n  return (\n    <div\n      {...containerProps}\n      data-testid=\"em-ds-toggle\"\n      aria-disabled={disabled}\n      defaultChecked={checked}\n      defaultValue={value}\n      {...onClickHandlerForNonInteractiveElements(\n        allowChange ? null : onChange,\n      )}\n      ref={containerRef}\n      className={cssClassName}\n      onBlur={onBlur}\n      onFocus={onFocus}\n    >\n      <div className={classNameBlock('box')}>\n        {checked && (\n          <div className={classNameElement('icon-on')}>{labelOn}</div>\n        )}\n        {!checked && (\n          <div className={classNameElement('icon-off')}>{labelOff}</div>\n        )}\n      </div>\n      <div\n        ref={handRef}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        className={classNameElement('input')}\n        onMouseDown={allowChange ? null : onMouseDown}\n        onMouseEnter={allowChange ? null : onMouseEnter}\n        onMouseLeave={allowChange ? null : onMouseLeave}\n        onTouchCancel={allowChange ? null : onTouchCancel}\n        onTouchEnd={allowChange ? null : onTouchEnd}\n        onTouchMove={allowChange ? null : onTouchMove}\n        onTouchStart={allowChange ? null : onTouchStart}\n        style={{\n          ...style,\n          ...dragStyle,\n        }}\n      />\n      <input\n        className={classNameElement('hidden-checkbox')}\n        defaultChecked={checked}\n        defaultValue={value}\n        name={name}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n};\n\nexport default DSToggleRender;\n","/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport {\n  isValidDrag,\n  cleanDrag,\n  calculateDrag,\n  dragStartingPoints,\n} from './toggleHelper';\nimport DSToggleRender from './DSToggleRender';\n\nclass DSToggleImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: props.checked || false,\n      inside: false,\n      isDragging: false,\n      drag: null,\n      startPoint: null,\n      circleWidth: null,\n      boxWidth: null,\n      ...dragStartingPoints(props.checked || false),\n    };\n    this.circle = React.createRef();\n    this.box = React.createRef();\n  }\n\n  componentDidMount() {\n    this.verifyElements();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot) {\n      this.verifyElements();\n    }\n  }\n\n  /**\n   * ******************************************************\n   * Drag\n   * ****************************************************** *\n   *\n   * @param clientX\n   */\n  onDragStart = clientX => {\n    const {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    } = this.state;\n    // const { checked: checkedProp, } = this.props\n    const drag = calculateDrag(clientX, {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    });\n    if (drag) this.setState({ drag });\n    // else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    else this.setDragOnChange(checked); // set initial position\n  };\n\n  onDragStop = e => {\n    const { checked } = this.state;\n    // const { checked: checkedProp, } = this.props\n    if (isValidDrag(this.state)) {\n      this.onChange(e);\n      this.setState(cleanDrag);\n      // } else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    } else this.setDragOnChange(checked); // set initial position\n  };\n\n  /**\n   * ******************************************************\n   * StandardEvents\n   * ****************************************************** *\n   *\n   * @param e\n   */\n  onBlur = e => {\n    const { onBlur, id } = this.props;\n    if (onBlur) onBlur(e, id);\n  };\n\n  onFocus = e => {\n    const { onFocus, id } = this.props;\n    if (onFocus) onFocus(e, id);\n  };\n\n  onChange = e => {\n    const { checked } = this.state;\n    const {\n      onChange,\n      id,\n      value,\n      // checked: checkedProp,\n    } = this.props;\n    const newCheck = !checked;\n    // this.setState({\n    //   checked: checkedProp != null ? checkedProp : newCheck,\n    // })\n    this.setState({\n      checked: newCheck,\n    });\n    e.target.value = value;\n    e.target.checked = newCheck;\n    e.checked = newCheck;\n    onChange(e, id);\n    // this.setDragOnChange(checkedProp != null ? checkedProp : newCheck) // set new position\n    this.setDragOnChange(newCheck); // set new position\n  };\n\n  /** ******************************************************\n      MouseEvents\n   ******************************************************* * */\n  onMouseEnter = () => {\n    this.setState({ inside: true });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ inside: false });\n  };\n\n  onMouseMove = event => {\n    event.preventDefault();\n    this.onDragStart(event.clientX);\n  };\n\n  onMouseDown = event => {\n    this.onDragStart(event.clientX);\n    this.setState({ startPoint: event.clientX, isDragging: true });\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp);\n  };\n\n  onMouseUp = event => {\n    this.onDragStop(event);\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  /** ******************************************************\n      Touch\n   ******************************************************* * */\n  onTouchCancel = () => {\n    this.setState({ inside: false });\n  };\n\n  onTouchEnd = event => {\n    event.preventDefault();\n    this.onDragStop(event);\n  };\n\n  onTouchMove = event => {\n    this.onDragStart(event.touches[0].clientX);\n  };\n\n  onTouchStart = event => {\n    this.onDragStart(event.touches[0].clientX);\n    this.setState({ startPoint: event.touches[0].clientX, isDragging: true });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.checked != null) {\n      return {\n        checked: props.checked,\n        ...dragStartingPoints(props.checked)(state),\n      };\n    }\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { size } = this.props;\n    if (prevProps.size !== size) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ******************************************************\n   * other\n   * ****************************************************** *\n   *\n   * @param currentCheckState\n   */\n  setDragOnChange(currentCheckState) {\n    this.setState(dragStartingPoints(currentCheckState));\n  }\n\n  verifyElements() {\n    const { checked } = this.state;\n    const { checked: checkedProp } = this.props;\n    const nodesInterval = setInterval(() => {\n      // !important it checks when nodes are availables\n      if (\n        !this.circle ||\n        !this.box ||\n        !this.circle.current ||\n        !this.box.current\n      )\n        return;\n      const {\n        current: { clientWidth: circleWidth },\n      } = this.circle;\n      const {\n        current: { clientWidth: boxWidth },\n      } = this.box;\n      if (!circleWidth || !boxWidth || circleWidth === boxWidth) return;\n      this.setState({\n        boxWidth,\n        circleWidth,\n      });\n      this.setDragOnChange(checkedProp != null ? checkedProp : checked);\n      // this.setDragOnChange(checked)\n      clearInterval(nodesInterval);\n    }, 100);\n  }\n\n  render() {\n    const { checked, drag, inside } = this.state;\n    const dragStyle =\n      drag !== null ? { transform: `translateX(${drag}px)` } : null;\n    return (\n      <DSToggleRender\n        {...this.props}\n        checked={checked}\n        containerRef={this.box}\n        dragStyle={dragStyle}\n        handRef={this.circle}\n        inside={inside}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onMouseDown={this.onMouseDown}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onTouchCancel={this.onTouchCancel}\n        onTouchEnd={this.onTouchEnd}\n        onTouchMove={this.onTouchMove}\n        onTouchStart={this.onTouchStart}\n      />\n    );\n  }\n}\n\nexport default DSToggleImpl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToggleImpl from './DSToggleImpl';\nimport { sizes } from '../../utils/prop-types';\n\nconst DSToggle = ({\n  containerProps = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = undefined,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  name = '',\n  value = '',\n  size = 's',\n  ...otherProps\n}) => (\n  <ToggleImpl\n    {...otherProps}\n    checked={checked}\n    containerProps={containerProps}\n    disabled={disabled}\n    hasError={hasError}\n    labelOff={labelOff}\n    labelOn={labelOn}\n    name={name}\n    readOnly={readOnly}\n    size={size}\n    value={value}\n  />\n);\n\nDSToggle.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(sizes),\n};\n\nexport default DSToggle;\n"],"sourceRoot":""}