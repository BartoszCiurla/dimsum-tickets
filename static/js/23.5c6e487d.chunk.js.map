{"version":3,"sources":["utils/randomTreeNodes.js","components/TreeToolbar.js","components/TreeContainer.js","TreeView/customHooks/useTreeProps.js","TreeView/SingleSelect.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js"],"names":["randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","TreeToolbar","searchQuery","setSearchQuery","withDepth","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","TreeContainer","styled","div","props","offsetHeight","useTreeProps","useState","disableGroups","setDisableGroups","toggleDisableGroups","nodes","onItemClick","item","console","log","SingleSelect","ref","useRef","useEffect","toggleExpandAll","current","actions","expandAll","checked","labelText","onChange","data","fluid","instanceRef","groupIcon","isSingleSelect","itemIcon","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","withSearchable","className","disabled","disableButton","innerRef","showIcon","style","onKeyUp","readOnly","rightComponent","buttonType","icon","iconSize","onClick","DSSearchBox","searchIcon","property","clearOnSearch","PropTypes","bool"],"mappings":"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","file":"static/js/23.5c6e487d.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n","import React from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\n\nexport const TreeToolbar = ({ searchQuery, setSearchQuery }) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        {/* <DSButton\n            buttonType='secondary'\n            labelText='Toggle Expand'\n            onClick={() => instanceRef.current.actions.toggleExpandAll()}\n          /> */}\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\n/** Fixes tree height issue */\nexport const TreeContainer = styled.div`\n  height: calc(100% - ${(props) => props.offsetHeight || 80}px);\n`;\n","import { useState } from 'react';\n\nexport const useTreeProps = () => {\n  const [disableGroups, setDisableGroups] = useState(false);\n  const toggleDisableGroups = () => setDisableGroups(!disableGroups);\n  return { disableGroups, toggleDisableGroups };\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin,\n  // TreeDndPlugin,\n  // TreeToolbarPlugin\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox';\nimport { TreeToolbar } from '../components/TreeToolbar';\nimport { TreeContainer } from '../components/TreeContainer';\nimport { randomEntitiesNoChildren } from '../utils/randomTreeNodes';\nimport { useTreeProps } from './customHooks/useTreeProps';\n// import { TooltipTextProvider } from \"@elliemae/ds-basic/TruncatedTooltipText\";\n// import renderToolbar from \"./renderToolbar\";\n\nconst nodes = randomEntitiesNoChildren(1000);\n\nconst onItemClick = (item) => {\n  console.log(111, item);\n};\n\nconst SingleSelect = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const { disableGroups, toggleDisableGroups } = useTreeProps();\n\n  const ref = useRef(null);\n\n  const expandAll = () => {\n    const toggleExpandAll = ref.current.actions.toggleExpandAll;\n    console.log('REF', ref.current);\n    if (toggleExpandAll) toggleExpandAll();\n  };\n\n  useEffect(() => {\n    expandAll();\n  }, []);\n\n  return (\n    <TreeContainer>\n      <DSCheckbox\n        checked={disableGroups}\n        labelText=\"Disable Groups\"\n        onChange={toggleDisableGroups}\n      />\n      <TreeToolbar\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n      />\n      <TreeView\n        data={nodes}\n        fluid\n        instanceRef={ref}\n        groupIcon={<Folder />}\n        isSingleSelect\n        itemIcon={<FilePdf />}\n        disableGroups={disableGroups}\n        // labelRenderer={value => value}\n        // onOrderChange={setData}\n        onItemClick={onItemClick}\n        plugins={[SelectablePluginTree, SearchableTreePlugin]}\n        // renderToolbar={renderToolbar}\n        searchQuery={searchQuery}\n        showChildrenAmount\n        // sortable\n        // width={400}\n      />\n    </TreeContainer>\n  );\n};\n\nexport default SingleSelect;\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport withSearchable from './withSearchable';\n\nfunction SearchBoxImpl({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  readOnly,\n  value,\n  clearable,\n}) {\n  return (\n    <DSTextBox\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      innerRef={innerRef}\n      onChange={onChange}\n      onKeyUp={onKeyUp}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      rightComponent={\n        showIcon && (\n          <DSButton\n            disabled={disabled || disableButton}\n            buttonType=\"text\"\n            icon={<Search />}\n            iconSize=\"s\"\n            onClick={onSearch}\n          />\n        )\n      }\n      style={style}\n      value={value}\n    />\n  );\n}\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n"],"sourceRoot":""}