{"version":3,"sources":["TreeView/PUI-2579.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../src/Toolbar/ToolbarItem.js","../../../../src/Toolbar/ToolbarGroup.js","../../../../src/Toolbar/ToolbarDivider.js","../../../../src/Toolbar/DSToolbar.js"],"names":["node","id","name","type","parent","children","Searchable","useState","data","setData","instanceRef","useRef","searchQuery","setSearchQuery","style","width","height","withDepth","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","fluid","groupIcon","isMultiSelect","itemIcon","onOrderChange","onToggleExpand","item","current","actions","toggleExpand","expandAllChildren","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","sortable","extraProps","component","cloneElement","className","ToolbarItem","icon","labelText","menu","undefined","otherProps","ref","useFocusGroupItem","btn","buttonType","innerRef","placement","Position","triggerComponent","PropTypes","string","ToolbarGroupContainer","space","ToolbarGroup","size","classProps","decorateToolbarChildren","aggregatedClasses","ToolbarDivider","ToolbarContainer","alignment","DSToolbar","autoFocusOnMount","containerRef","getContainer","keyBindings","Tab","mergeRefs"],"mappings":"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","file":"static/js/24.a1c14b66.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin\n} from \"@elliemae/ds-treeview\";\nimport Folder from \"@elliemae/ds-icons/Folder\";\nimport FilePdf from \"@elliemae/ds-icons/FilePdf\";\n// import DSButton from '@elliemae/ds-basic/Button'\n// import { ToolbarGroup } from \"@elliemae/ds-basic\";\nimport { SearchBoxToggle } from \"@elliemae/ds-basic/form/SearchBox\";\nimport DSToolbar from \"@elliemae/ds-basic/Toolbar\";\nimport DSSeparator from \"@elliemae/ds-basic/Separator\";\n\nconst node = {\n  id: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n  name: \"BridgeServices_RegressionSuite_QA (2)\",\n  type: \"taskgroup\",\n  parent: undefined,\n  children: [\n    {\n      id: \"4548a528-a0b2-4ee5-8fb3-94628e3320a6\",\n      name: \"Test123 (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    },\n    {\n      id: \"0ba3e4bb-bce5-4c3c-aafc-2f79670ac3b6\",\n      name: \"Test (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    }\n  ]\n};\n\nconst Searchable = () => {\n  const [data, setData] = useState(node.children);\n  const instanceRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <>\n      <div style={{ width: 270, height: \"100%\" }}>\n        <DSToolbar withDepth={false}>\n          {/* <DSButton\n            buttonType='secondary'\n            labelText='Toggle Expand'\n            onClick={() => instanceRef.current.actions.toggleExpandAll()}\n          /> */}\n          <SearchBoxToggle\n            clearable\n            containerProps={{ \"data-testid\": \"tree-searchbox\" }}\n            onSearch={({ value }) => setSearchQuery(value)}\n            placeholder=\"Search all\"\n            searchOnEnter={false}\n            value={searchQuery}\n          />\n        </DSToolbar>\n        <DSSeparator margin=\"none\" orientation=\"horizontal\" type=\"non-form\" />\n        <TreeView\n          data={data}\n          fluid\n          groupIcon={<Folder />}\n          instanceRef={instanceRef}\n          isMultiSelect\n          itemIcon={<FilePdf />}\n          onOrderChange={setData}\n          onToggleExpand={item => {\n            instanceRef.current.actions.toggleExpand(item, {\n              expandAllChildren: true\n            });\n          }}\n          plugins={[SelectablePluginTree, SearchableTreePlugin]}\n          searchQuery={searchQuery}\n          showChildrenAmount\n          sortable\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Searchable;\n","import React, { cloneElement } from 'react'\n\nexport default (children, extraProps = {}) => (\n  React.Children.map(children,\n    component => (component ? cloneElement(component, {\n      ...extraProps,\n      ...component.props,\n      className: `${component.props.className} toolbar-item`,\n    }) : component), null)\n)\n","import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport DSButton from '@elliemae/ds-basic/Button'\nimport { useFocusGroupItem } from '@elliemae/ds-shared/esm/FocusGroup'\nimport { Position } from '../Popper/positions'\n\nconst ToolbarItem = ({\n  icon,\n  labelText,\n  menu = undefined,\n  ...otherProps\n}) => {\n  const ref = useRef(null)\n\n  useFocusGroupItem(ref)\n  const btn = (\n    <DSButton\n      {...otherProps}\n      buttonType='text'\n      icon={icon}\n      innerRef={ref}\n      labelText={labelText}\n    />\n  )\n  if (menu) {\n    return React.cloneElement(menu, {\n      ...menu.props,\n      placement: Position.BOTTOM_END,\n      triggerComponent: btn,\n    })\n  }\n  return btn\n}\n\nToolbarItem.displayName = 'ToolbarItem'\n\nToolbarItem.propTypes = {\n  icon: PropTypes.element,\n  labelText: PropTypes.string,\n}\n\nexport default ToolbarItem\n","import React from 'react'\nimport { aggregatedClasses } from '@elliemae/ds-classnames'\nimport decorateToolbarChildren from './decorateToolbarChildren'\n\nconst blockName = 'toolbar-group'\n\nconst ToolbarGroupContainer = aggregatedClasses('div')(blockName, null, ({ space }) => ({\n  [`space-${space}`]: !!space,\n}))\n\nconst ToolbarGroup = ({ children, size, space = 0 }) => {\n  return (\n    <ToolbarGroupContainer\n      classProps={{ space }}\n    >\n      {decorateToolbarChildren(children, { size })}\n    </ToolbarGroupContainer>\n  )\n}\n\nexport default ToolbarGroup\n","import { aggregatedClasses } from '@elliemae/ds-classnames'\n\nconst blockName = 'toolbar'\n\nconst ToolbarDivider = aggregatedClasses('div')(blockName, 'divider')\n\nToolbarDivider.displayName = 'ToolbarDivider'\n\nexport default ToolbarDivider\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n"],"sourceRoot":""}