{"version":3,"sources":["DataGrid/customRenderers/ToggleCell.js","../../../../../node_modules/@babel/runtime/helpers/esm/typeof.js","../../../../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../../../node_modules/@babel/runtime/helpers/esm/createClass.js","../../../../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../../../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../../../../../node_modules/@babel/runtime/helpers/esm/inherits.js","../../../../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../../../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../../../../../src/form/Toggle/toggleHelper.js","../../../../../src/form/Toggle/DSToggleRender.js","../../../../../../ds-utilities/dist/esm/onClickHandlerForNonInteractiveElements.js","../../../../../src/form/Toggle/DSToggleImpl.js","../../../../../src/form/Toggle/DSToggle.js"],"names":["ToggleCell","customHandlers","onToggle","rowData","metaData","entityType","activeField","id","isChecked","get","dataProps","containerProps","onChange","useCallback","event","stopPropagation","checked","_typeof","obj","Symbol","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","descriptor","Object","_createClass","protoProps","staticProps","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","p","_inherits","subClass","superClass","constructor","value","writable","configurable","setPrototypeOf","_possibleConstructorReturn","call","assertThisInitialized","_getPrototypeOf","cleanDrag","startPoint","isDragging","dragStartingPoints","circleWidth","boxWidth","drag","className","style","hasError","readOnly","disabled","onBlur","onFocus","onMouseDown","onMouseEnter","onMouseLeave","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","labelOn","labelOff","dragStyle","containerRef","handRef","name","size","convertPropToCssClassName","cssClassName","classNameBlock","classNameElement","allowChange","data-testid","aria-disabled","defaultChecked","defaultValue","role","tabIndex","onClick","onKeyPress","keycode","onClickHandler","ref","aria-checked","type","DSToggleImpl","clientX","move","calculateDrag","e","inside","isValidDrag","newCheck","window","React","this","prevProps","prevState","snapshot","currentCheckState","checkedProp","nodesInterval","setInterval","clearInterval","transform","state","Component","DSToggle","otherProps","PropTypes"],"mappings":"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","file":"static/js/26.2549dc28.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport DSToggle from '@elliemae/ds-basic/form/Toggle';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst ToggleCell = ({\n  customHandlers: { onToggle = () => {} },\n  metaData: { rowData },\n  entityType = 'workflow-rule',\n  activeField = 'active',\n}) => {\n  const { id } = rowData;\n  const isChecked = get(rowData, activeField);\n  const dataProps = {\n    'data-testid': `${entityType}-${activeField}-toggle`,\n    [`data-${entityType}Id`]: id,\n    containerProps: {\n      'data-testid': `${entityType}-${activeField}-toggle-container`,\n    },\n  };\n  const onChange = useCallback(\n    (event) => {\n      event.stopPropagation();\n      onToggle(rowData);\n    },\n    [onToggle, rowData],\n  );\n  return (\n    <DSToggle\n      {...dataProps}\n      checked={isChecked}\n      onChange={onChange}\n    />\n  );\n};\nToggleCell.propTypes = {\n  customHandlers: PropTypes.shape({\n    onToggle: PropTypes.func,\n  }),\n  metaData: PropTypes.shape({\n    rowData: PropTypes.object,\n  }),\n  entityType: PropTypes.string.isRequired,\n  activeField: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport default ToggleCell;\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export const isValidDrag = ({\n  inside,\n  circleWidth,\n  drag,\n  checked,\n  boxWidth,\n}) => {\n  const difference = boxWidth - circleWidth;\n  return checked\n    ? !inside && -drag > difference / 2\n    : !inside && drag > boxWidth / 3;\n};\n\nexport const cleanDrag = () => ({\n  startPoint: null,\n  isDragging: false,\n});\n\nexport const calculateDrag = (\n  clientX,\n  { startPoint, checked, isDragging, boxWidth, circleWidth },\n) => {\n  if (!isDragging) return null;\n  const move = startPoint - clientX;\n  const drag = !checked ? clientX - startPoint : boxWidth - circleWidth - move;\n  if (!checked && clientX > 0 && clientX > startPoint && drag < boxWidth * 0.7)\n    return drag;\n  if (checked && clientX > 0 && clientX < startPoint && move < boxWidth * 0.7)\n    return drag;\n  return null;\n};\n\nexport const dragStartingPoints = checked => ({ circleWidth, boxWidth }) => {\n  if (checked) return { drag: boxWidth - circleWidth };\n  return {\n    drag: 0,\n  };\n};\n","import React from 'react';\nimport onClickHandlerForNonInteractiveElements from '@elliemae/ds-utilities/onClickHandlerForNonInteractiveElements';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\n\nconst DSToggleRender = ({\n  containerProps,\n  id,\n  className = '',\n  style = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = false,\n  onBlur = () => null,\n  onFocus = () => null,\n  onChange = () => null,\n  onMouseDown = () => null,\n  onMouseEnter = () => null,\n  onMouseLeave = () => null,\n  onTouchCancel = () => null,\n  onTouchEnd = () => null,\n  onTouchMove = () => null,\n  onTouchStart = () => null,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  dragStyle = {},\n  containerRef = null,\n  handRef = null,\n  name = '',\n  value = '',\n  size = 's',\n}) => {\n  const {\n    cssClassName,\n    classNameBlock,\n    classNameElement,\n  } = convertPropToCssClassName('form-element-toggle', className, {\n    hasError,\n    readOnly,\n    disabled,\n    checked,\n    id,\n    size,\n  });\n  const allowChange = disabled || readOnly;\n  return (\n    <div\n      {...containerProps}\n      data-testid=\"em-ds-toggle\"\n      aria-disabled={disabled}\n      defaultChecked={checked}\n      defaultValue={value}\n      {...onClickHandlerForNonInteractiveElements(\n        allowChange ? null : onChange,\n      )}\n      ref={containerRef}\n      className={cssClassName}\n      onBlur={onBlur}\n      onFocus={onFocus}\n    >\n      <div className={classNameBlock('box')}>\n        {checked && (\n          <div className={classNameElement('icon-on')}>{labelOn}</div>\n        )}\n        {!checked && (\n          <div className={classNameElement('icon-off')}>{labelOff}</div>\n        )}\n      </div>\n      <div\n        ref={handRef}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        className={classNameElement('input')}\n        onMouseDown={allowChange ? null : onMouseDown}\n        onMouseEnter={allowChange ? null : onMouseEnter}\n        onMouseLeave={allowChange ? null : onMouseLeave}\n        onTouchCancel={allowChange ? null : onTouchCancel}\n        onTouchEnd={allowChange ? null : onTouchEnd}\n        onTouchMove={allowChange ? null : onTouchMove}\n        onTouchStart={allowChange ? null : onTouchStart}\n        style={{\n          ...style,\n          ...dragStyle,\n        }}\n      />\n      <input\n        className={classNameElement('hidden-checkbox')}\n        defaultChecked={checked}\n        defaultValue={value}\n        name={name}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n};\n\nexport default DSToggleRender;\n","/**\n * onClickHandler: callback\n *\n * @param onClickHandler\n */\nvar onClickHandlerForNonInteractiveElements = (function (onClickHandler) {\n  return {\n    role: 'button',\n    tabIndex: '0',\n    onClick: onClickHandler,\n    onKeyPress: function onKeyPress(event) {\n      event.stopPropagation();\n      var keycode = event.keycode,\n          key = event.key;\n      if (key === 'Enter') onClickHandler(event);else if (keycode === 13) onClickHandler(event);\n    }\n  };\n});\n\nexport default onClickHandlerForNonInteractiveElements;\n//# sourceMappingURL=onClickHandlerForNonInteractiveElements.js.map\n","/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport {\n  isValidDrag,\n  cleanDrag,\n  calculateDrag,\n  dragStartingPoints,\n} from './toggleHelper';\nimport DSToggleRender from './DSToggleRender';\n\nclass DSToggleImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: props.checked || false,\n      inside: false,\n      isDragging: false,\n      drag: null,\n      startPoint: null,\n      circleWidth: null,\n      boxWidth: null,\n      ...dragStartingPoints(props.checked || false),\n    };\n    this.circle = React.createRef();\n    this.box = React.createRef();\n  }\n\n  componentDidMount() {\n    this.verifyElements();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot) {\n      this.verifyElements();\n    }\n  }\n\n  /**\n   * ******************************************************\n   * Drag\n   * ****************************************************** *\n   *\n   * @param clientX\n   */\n  onDragStart = clientX => {\n    const {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    } = this.state;\n    // const { checked: checkedProp, } = this.props\n    const drag = calculateDrag(clientX, {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    });\n    if (drag) this.setState({ drag });\n    // else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    else this.setDragOnChange(checked); // set initial position\n  };\n\n  onDragStop = e => {\n    const { checked } = this.state;\n    // const { checked: checkedProp, } = this.props\n    if (isValidDrag(this.state)) {\n      this.onChange(e);\n      this.setState(cleanDrag);\n      // } else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    } else this.setDragOnChange(checked); // set initial position\n  };\n\n  /**\n   * ******************************************************\n   * StandardEvents\n   * ****************************************************** *\n   *\n   * @param e\n   */\n  onBlur = e => {\n    const { onBlur, id } = this.props;\n    if (onBlur) onBlur(e, id);\n  };\n\n  onFocus = e => {\n    const { onFocus, id } = this.props;\n    if (onFocus) onFocus(e, id);\n  };\n\n  onChange = e => {\n    const { checked } = this.state;\n    const {\n      onChange,\n      id,\n      value,\n      // checked: checkedProp,\n    } = this.props;\n    const newCheck = !checked;\n    // this.setState({\n    //   checked: checkedProp != null ? checkedProp : newCheck,\n    // })\n    this.setState({\n      checked: newCheck,\n    });\n    e.target.value = value;\n    e.target.checked = newCheck;\n    e.checked = newCheck;\n    onChange(e, id);\n    // this.setDragOnChange(checkedProp != null ? checkedProp : newCheck) // set new position\n    this.setDragOnChange(newCheck); // set new position\n  };\n\n  /** ******************************************************\n      MouseEvents\n   ******************************************************* * */\n  onMouseEnter = () => {\n    this.setState({ inside: true });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ inside: false });\n  };\n\n  onMouseMove = event => {\n    event.preventDefault();\n    this.onDragStart(event.clientX);\n  };\n\n  onMouseDown = event => {\n    this.onDragStart(event.clientX);\n    this.setState({ startPoint: event.clientX, isDragging: true });\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp);\n  };\n\n  onMouseUp = event => {\n    this.onDragStop(event);\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  /** ******************************************************\n      Touch\n   ******************************************************* * */\n  onTouchCancel = () => {\n    this.setState({ inside: false });\n  };\n\n  onTouchEnd = event => {\n    event.preventDefault();\n    this.onDragStop(event);\n  };\n\n  onTouchMove = event => {\n    this.onDragStart(event.touches[0].clientX);\n  };\n\n  onTouchStart = event => {\n    this.onDragStart(event.touches[0].clientX);\n    this.setState({ startPoint: event.touches[0].clientX, isDragging: true });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.checked != null) {\n      return {\n        checked: props.checked,\n        ...dragStartingPoints(props.checked)(state),\n      };\n    }\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { size } = this.props;\n    if (prevProps.size !== size) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ******************************************************\n   * other\n   * ****************************************************** *\n   *\n   * @param currentCheckState\n   */\n  setDragOnChange(currentCheckState) {\n    this.setState(dragStartingPoints(currentCheckState));\n  }\n\n  verifyElements() {\n    const { checked } = this.state;\n    const { checked: checkedProp } = this.props;\n    const nodesInterval = setInterval(() => {\n      // !important it checks when nodes are availables\n      if (\n        !this.circle ||\n        !this.box ||\n        !this.circle.current ||\n        !this.box.current\n      )\n        return;\n      const {\n        current: { clientWidth: circleWidth },\n      } = this.circle;\n      const {\n        current: { clientWidth: boxWidth },\n      } = this.box;\n      if (!circleWidth || !boxWidth || circleWidth === boxWidth) return;\n      this.setState({\n        boxWidth,\n        circleWidth,\n      });\n      this.setDragOnChange(checkedProp != null ? checkedProp : checked);\n      // this.setDragOnChange(checked)\n      clearInterval(nodesInterval);\n    }, 100);\n  }\n\n  render() {\n    const { checked, drag, inside } = this.state;\n    const dragStyle =\n      drag !== null ? { transform: `translateX(${drag}px)` } : null;\n    return (\n      <DSToggleRender\n        {...this.props}\n        checked={checked}\n        containerRef={this.box}\n        dragStyle={dragStyle}\n        handRef={this.circle}\n        inside={inside}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onMouseDown={this.onMouseDown}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onTouchCancel={this.onTouchCancel}\n        onTouchEnd={this.onTouchEnd}\n        onTouchMove={this.onTouchMove}\n        onTouchStart={this.onTouchStart}\n      />\n    );\n  }\n}\n\nexport default DSToggleImpl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToggleImpl from './DSToggleImpl';\nimport { sizes } from '../../utils/prop-types';\n\nconst DSToggle = ({\n  containerProps = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = undefined,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  name = '',\n  value = '',\n  size = 's',\n  ...otherProps\n}) => (\n  <ToggleImpl\n    {...otherProps}\n    checked={checked}\n    containerProps={containerProps}\n    disabled={disabled}\n    hasError={hasError}\n    labelOff={labelOff}\n    labelOn={labelOn}\n    name={name}\n    readOnly={readOnly}\n    size={size}\n    value={value}\n  />\n);\n\nDSToggle.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(sizes),\n};\n\nexport default DSToggle;\n"],"sourceRoot":""}