{"version":3,"sources":["components/TreeToolbar.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../src/form/TextBox/DSTextBox.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../../src/Toolbar/DSToolbar.js"],"names":["TreeToolbar","searchQuery","setSearchQuery","withDepth","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","type","createIcon","paths","height","width","WrappedComponent","debounce","props","prevPropValue","React","this","onKeyUp","key","e","property","clearOnSearch","setState","query","target","onChange","rest","buttonRef","nextProps","children","extraProps","component","cloneElement","className","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","innerRef","min","max","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","PropTypes","string","withSearchable","disableButton","showIcon","style","buttonType","icon","iconSize","onClick","DSSearchBox","searchIcon","bool","ToolbarContainer","alignment","size","DSToolbar","autoFocusOnMount","containerRef","useRef","getContainer","keyBindings","Tab","classProps","mergeRefs","decorateToolbarChildren"],"mappings":"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","file":"static/js/20.298d8330.chunk.js","sourcesContent":["import React from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\n\nexport const TreeToolbar = ({ searchQuery, setSearchQuery }) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        {/* <DSButton\n            buttonType='secondary'\n            labelText='Toggle Expand'\n            onClick={() => instanceRef.current.actions.toggleExpandAll()}\n          /> */}\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","/* eslint-disable react/display-name */\nimport React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = WrappedComponent =>\n  class extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    static defaultProps = {\n      onSearch: () => null,\n      onKeyUp: () => null,\n      property: 'all',\n      searchOnEnter: true,\n      clearOnSearch: false,\n      containerProps: {},\n    };\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n        prevPropValue: '',\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      // if (this.buttonRef.current) this.buttonRef.current.focus()\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  };\n\nexport default withSearchable;\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport withSearchable from './withSearchable';\n\nfunction SearchBoxImpl({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  readOnly,\n  value,\n  clearable,\n}) {\n  return (\n    <DSTextBox\n      className={className}\n      clearable={clearable}\n      containerProps={containerProps}\n      disabled={disabled}\n      innerRef={innerRef}\n      onChange={onChange}\n      onKeyUp={onKeyUp}\n      placeholder={placeholder}\n      readOnly={readOnly}\n      rightComponent={\n        showIcon && (\n          <DSButton\n            disabled={disabled || disableButton}\n            buttonType=\"text\"\n            icon={<Search />}\n            iconSize=\"s\"\n            onClick={onSearch}\n          />\n        )\n      }\n      style={style}\n      value={value}\n    />\n  );\n}\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n"],"sourceRoot":""}