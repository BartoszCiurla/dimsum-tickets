{"version":3,"sources":["../../../../../src/form/ExpandableInput/ExpandableInputImpl.js","../../../../../src/form/ExpandableInput/DSExpandableInput.js","../../../../../src/form/SearchBox/SearchBoxToggle.js","TreeView/PUI-2579.js","../../../src/utils.js"],"names":["ExpandableInput","aggregatedClasses","opened","InputWrapper","ExpandableInputImpl","prevProps","isOpen","this","input","focus","innerRef","triggerComponent","children","width","onOpen","onClose","onBlur","containerProps","InputComponent","React","classProps","style","rightComponents","cloneElement","key","onClick","e","isFunction","className","node","Component","SearchBoxContainer","SearchBoxToggle","debounce","clearOnSearch","value","prevValue","onSearch","setState","executeIfValue","handleSearch","expandableEl","contains","onChange","onKeyUp","placeholder","clearable","buttonRef","buttonType","icon","showIcon","withSearchable","id","name","type","parent","Searchable","useState","data","setData","instanceRef","useRef","searchQuery","setSearchQuery","height","DSToolbar","withDepth","searchOnEnter","DSSeparator","margin","orientation","TreeView","fluid","groupIcon","Folder","isMultiSelect","itemIcon","FilePdf","onOrderChange","onToggleExpand","item","current","actions","toggleExpand","expandAllChildren","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","sortable","param"],"mappings":"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","file":"static/js/44.d2f56f33.chunk.js","sourcesContent":["import React, { Component, cloneElement } from 'react';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport { isFunction } from '@elliemae/ds-shared/utils';\nimport { InputAddonWrapper } from '@elliemae/ds-basic/form/Input';\n\nconst blockName = 'expandable-input';\n\nconst ExpandableInput = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ isOpen }) => ({ opened: isOpen }),\n);\nconst InputWrapper = aggregatedClasses(InputAddonWrapper)(\n  blockName,\n  'wrapper',\n  ({ isOpen }) => ({ opened: isOpen }),\n);\n\nexport default class ExpandableInputImpl extends Component {\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props;\n    if (isOpen && isOpen !== prevProps.isOpen) this.input.focus();\n  }\n\n  render() {\n    const {\n      innerRef,\n      triggerComponent,\n      children,\n      width,\n      isOpen,\n      onOpen,\n      onClose,\n      onBlur,\n      containerProps,\n    } = this.props;\n    const InputComponent = React.Children.only(children);\n    const handleTriggerClick = e => {\n      if (isFunction(triggerComponent.onClick)) triggerComponent.onClick(e);\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    };\n\n    return (\n      <ExpandableInput\n        {...containerProps}\n        classProps={{ isOpen }}\n        innerRef={innerRef}\n        style={{ width: isOpen && width }}\n      >\n        <InputWrapper\n          rightComponents={[\n            cloneElement(triggerComponent, {\n              key: 'handler',\n              onClick: handleTriggerClick,\n            }),\n          ]}\n        >\n          {cloneElement(InputComponent, {\n            className: 'expandable-input__input',\n            innerRef: node => (this.input = node),\n            onBlur,\n          })}\n        </InputWrapper>\n      </ExpandableInput>\n    );\n  }\n}\n","import React from 'react';\nimport ExpandableInputImpl from './ExpandableInputImpl';\n\nconst DSExpandableInput = ({\n  containerProps = {},\n  innerRef,\n  className = '',\n  style = {},\n  triggerComponent = undefined,\n  children,\n  isOpen = false,\n  onOpen = () => null,\n  onClose = () => null,\n  onBlur = () => null,\n  width = undefined,\n}) => (\n  <ExpandableInputImpl\n    className={className}\n    containerProps={containerProps}\n    innerRef={innerRef}\n    isOpen={isOpen}\n    onBlur={onBlur}\n    onClose={onClose}\n    onOpen={onOpen}\n    style={style}\n    triggerComponent={triggerComponent}\n    width={width}\n  >\n    {children}\n  </ExpandableInputImpl>\n);\n\nexport default DSExpandableInput;\n","import React, { Component } from 'react';\nimport { debounce } from '@elliemae/ds-utilities/utils';\nimport SearchIcon from '@elliemae/ds-icons/Search';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSExpandableInput from '@elliemae/ds-basic/form/ExpandableInput';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport withSearchable from './withSearchable';\n\nconst blockName = 'searchbox-toggle';\nconst SearchBoxContainer = aggregatedClasses('div')(blockName);\n\nclass SearchBoxToggle extends Component {\n  hideInput = debounce(this.handleHideInput, 100);\n\n  showInput = debounce(this.handleShowInput, 100);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n\n    this.hideInput = this.hideInput.bind(this);\n    this.showInput = this.showInput.bind(this);\n    this.handleHideInput = this.handleHideInput.bind(this);\n    this.handleShowInput = this.handleShowInput.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { clearOnSearch, value } = this.props;\n    const { value: prevValue } = prevProps;\n    if (\n      clearOnSearch &&\n      value !== prevValue &&\n      !value &&\n      prevValue &&\n      prevValue.length !== 1\n    ) {\n      this.handleHideInput(false);\n    }\n  }\n\n  handleSearch() {\n    const { onSearch, clearOnSearch } = this.props;\n    onSearch();\n    if (clearOnSearch) this.setState({ isOpen: false });\n  }\n\n  handleHideInput(executeIfValue = true) {\n    const { value } = this.props;\n    if (value) {\n      if (executeIfValue) this.handleSearch();\n    } else {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  handleBlur(e) {\n    if (this.expandableEl.contains(e.target)) return;\n    this.hideInput(false);\n  }\n\n  handleShowInput() {\n    this.setState({ isOpen: true });\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyUp,\n      value,\n      placeholder,\n      clearable,\n      className,\n      buttonRef,\n      containerProps,\n      width = 300,\n    } = this.props;\n    const { isOpen } = this.state;\n    return (\n      <SearchBoxContainer>\n        <DSExpandableInput\n          containerProps={containerProps}\n          innerRef={node => (this.expandableEl = node)}\n          isOpen={isOpen}\n          onBlur={this.handleBlur}\n          onClose={this.hideInput}\n          onOpen={this.showInput}\n          triggerComponent={\n            <DSButton\n              key=\"handler\"\n              buttonType=\"text\"\n              icon={<SearchIcon />}\n              innerRef={buttonRef}\n            />\n          }\n          width={width}\n        >\n          <DSTextBox\n            className={`expandable-input__input ${className}`}\n            clearable={clearable}\n            onChange={onChange}\n            onKeyUp={onKeyUp}\n            placeholder={placeholder}\n            showIcon={false}\n            value={value}\n          />\n        </DSExpandableInput>\n      </SearchBoxContainer>\n    );\n  }\n}\n\nexport default withSearchable(SearchBoxToggle);\n","import React, { useRef, useState } from \"react\";\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin\n} from \"@elliemae/ds-treeview\";\nimport Folder from \"@elliemae/ds-icons/Folder\";\nimport FilePdf from \"@elliemae/ds-icons/FilePdf\";\n// import DSButton from '@elliemae/ds-basic/Button'\n// import { ToolbarGroup } from \"@elliemae/ds-basic\";\nimport { SearchBoxToggle } from \"@elliemae/ds-basic/form/SearchBox\";\nimport DSToolbar from \"@elliemae/ds-basic/Toolbar\";\nimport DSSeparator from \"@elliemae/ds-basic/Separator\";\n\nconst node = {\n  id: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n  name: \"BridgeServices_RegressionSuite_QA (2)\",\n  type: \"taskgroup\",\n  parent: undefined,\n  children: [\n    {\n      id: \"4548a528-a0b2-4ee5-8fb3-94628e3320a6\",\n      name: \"Test123 (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    },\n    {\n      id: \"0ba3e4bb-bce5-4c3c-aafc-2f79670ac3b6\",\n      name: \"Test (1)\",\n      type: \"task\",\n      parent: \"fd28f6e5-d055-4ed8-b3f1-a4c2473876a4\",\n      children: []\n    }\n  ]\n};\n\nconst Searchable = () => {\n  const [data, setData] = useState(node.children);\n  const instanceRef = useRef(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <>\n      <div style={{ width: 270, height: \"100%\" }}>\n        <DSToolbar withDepth={false}>\n          {/* <DSButton\n            buttonType='secondary'\n            labelText='Toggle Expand'\n            onClick={() => instanceRef.current.actions.toggleExpandAll()}\n          /> */}\n          <SearchBoxToggle\n            clearable\n            containerProps={{ \"data-testid\": \"tree-searchbox\" }}\n            onSearch={({ value }) => setSearchQuery(value)}\n            placeholder=\"Search all\"\n            searchOnEnter={false}\n            value={searchQuery}\n          />\n        </DSToolbar>\n        <DSSeparator margin=\"none\" orientation=\"horizontal\" type=\"non-form\" />\n        <TreeView\n          data={data}\n          fluid\n          groupIcon={<Folder />}\n          instanceRef={instanceRef}\n          isMultiSelect\n          itemIcon={<FilePdf />}\n          onOrderChange={setData}\n          onToggleExpand={item => {\n            instanceRef.current.actions.toggleExpand(item, {\n              expandAllChildren: true\n            });\n          }}\n          plugins={[SelectablePluginTree, SearchableTreePlugin]}\n          searchQuery={searchQuery}\n          showChildrenAmount\n          sortable\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Searchable;\n","/* eslint-disable no-loops/no-loops, no-cond-assign */\nexport const objectType = obj =>\n  Object.prototype.toString.call(obj).slice(8, -1);\nexport const isDefined = param => typeof param !== 'undefined';\nexport const isUndefined = param => typeof param === 'undefined';\nexport const isFunction = param => typeof param === 'function';\nexport const isNumber = param => typeof param === 'number' && !isNaN(param); // eslint-disable-line\nexport const isString = str => objectType(str) === 'String';\nexport const isArray = arr => objectType(arr) === 'Array';\n\nexport const closest = (target, selector) => {\n  // closest(e.target, '.field')\n  while (target) {\n    // eslint-disable-line\n    if (target.matches && target.matches(selector)) return target;\n    if (target.msMatchesSelector && target.msMatchesSelector(selector))\n      return target;\n    target = target.parentNode;\n  }\n  return null;\n};\n\nexport const getOffsetRect = elem => {\n  // (1)\n  const box = elem.getBoundingClientRect();\n\n  const { body, documentElement } = document;\n\n  // (2)\n  const scrollTop =\n    window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n  const scrollLeft =\n    window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n  // (3)\n  const clientTop = documentElement.clientTop || body.clientTop || 0;\n  const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n  // (4)\n  const top = box.top + scrollTop - clientTop;\n  const left = box.left + scrollLeft - clientLeft;\n\n  return { top: Math.round(top), left: Math.round(left) };\n};\n\nexport const getTotalScroll = elem => {\n  let top = 0;\n  let left = 0;\n\n  while ((elem = elem.parentNode)) {\n    top += elem.scrollTop || 0;\n    left += elem.scrollLeft || 0;\n  }\n\n  return { top, left };\n};\n\nexport const getTransformProps = (x, y) => ({\n  transform: `translate(${x}px, ${y}px)`,\n});\n\nexport const listWithChildren = (list, childrenProp) =>\n  list.map(item => ({\n    ...item,\n    [childrenProp]: item[childrenProp]\n      ? listWithChildren(item[childrenProp], childrenProp)\n      : [],\n  }));\n\nexport const getAllNonEmptyNodesIds = (items, childrenProp) => {\n  let childrenIds = [];\n  const ids = items\n    .filter(item => item[childrenProp].length)\n    .map(item => {\n      childrenIds = childrenIds.concat(\n        getAllNonEmptyNodesIds(item[childrenProp], childrenProp),\n      );\n      return item.id;\n    });\n\n  return ids.concat(childrenIds);\n};\n"],"sourceRoot":""}