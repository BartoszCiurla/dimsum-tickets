{"version":3,"sources":["utils/randomTreeNodes.js","TreeView/customHooks/useTreeInitialSelectionState.js","TreeView/AutoScroll/SingleSelect.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js"],"names":["randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","useTreeInitialSelectionState","allTreeItems","items","useState","selectionHash","setSelectionHash","useEffect","initialState","selectedItems","isArray","length","reduce","acc","item","evalParent","hash","parentId","parents","nodes","onItemClick","console","log","Overview","data","ref","useRef","toggleExpandAll","current","actions","expandAll","fluid","instanceRef","groupIcon","isSingleSelect","itemIcon","selection","plugins","SelectablePluginTree","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","toLowerCase","TypeError","v4","options","buf","rnds"],"mappings":"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","file":"static/js/29.1517f446.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n","import { useEffect, useState } from 'react';\nimport { evalParent } from '../../utils/tree.util';\n\n/**\n * Sets the initial selection state\n *\n * @param {object} allTreeItems hash object with all tree elements\n * @param {Array} items The initially selected items. Could be an array for multiSelect or a single object\n * @returns {object} The selections hash object, each key (id) representing a selected tree element\n */\nexport const useTreeInitialSelectionState = (\n  allTreeItems,\n  items = [],\n) => {\n  const [selectionHash, setSelectionHash] = useState({});\n\n  useEffect(() => {\n    let initialState = {};\n    const selectedItems = Array.isArray(items) ? items : [items];\n    if (selectedItems.length) {\n      initialState = selectedItems.reduce(\n        (acc, item) => {\n          acc.items = { ...acc.items, [item.id]: true };\n          if (item.parent && !acc.items[item.parent]) {\n            return evalParent({\n              hash: allTreeItems,\n              selectedItems,\n              acc,\n              parentId: item.parent,\n            });\n          }\n          return acc;\n        },\n        { items: [], parents: [] },\n      );\n    }\n    setSelectionHash(initialState.items);\n  }, [allTreeItems, items]);\n\n  return selectionHash;\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  // TreeDndPlugin,\n  // TreeToolbarPlugin\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport { useTreeInitialSelectionState } from '../customHooks/useTreeInitialSelectionState';\nimport { randomEntities } from '../../utils/randomTreeNodes';\n// import { TooltipTextProvider } from \"@elliemae/ds-basic/TruncatedTooltipText\";\n// import renderToolbar from \"./renderToolbar\";\n\nconst nodes = randomEntities(100);\n\nconst onItemClick = (item) => {\n  console.log(111, item);\n};\n\nconst Overview = () => {\n  const [data] = useState(nodes);\n  const selectionHash = useTreeInitialSelectionState(nodes, [\n    nodes[85],\n  ]);\n  const ref = useRef(null);\n\n  const expandAll = () => {\n    const toggleExpandAll = ref.current.actions.toggleExpandAll;\n    console.log('REF', ref.current);\n    if (toggleExpandAll) toggleExpandAll();\n  };\n\n  useEffect(() => {\n    expandAll();\n  }, []);\n\n  return (\n    <TreeView\n      data={data}\n      fluid\n      instanceRef={ref}\n      groupIcon={<Folder />}\n      isSingleSelect\n      itemIcon={<FilePdf />}\n      selection={selectionHash}\n      // labelRenderer={value => value}\n      // onOrderChange={setData}\n      onItemClick={onItemClick}\n      plugins={[SelectablePluginTree]}\n      // renderToolbar={renderToolbar}\n      // showChildrenAmount\n      // sortable\n      // width={400}\n    />\n  );\n};\n\nexport default Overview;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"sourceRoot":""}